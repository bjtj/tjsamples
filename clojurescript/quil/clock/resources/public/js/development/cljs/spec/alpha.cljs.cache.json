["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$merge","~$keys","~$+","~$and","~$def"]],"~:name","~$cljs.spec.alpha","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$gobj","~$goog.object","^C","^C","~$walk","~$clojure.walk","~$gen","~$cljs.spec.gen.alpha","~$c","^A","~$str","~$clojure.string","^I","^I","^E","^E","^G","^G"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","~:line",181,"~:column",7,"~:end-line",181,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^V",[["~$spec"]]]]],"~:doc","returns the spec as data"],"^=","~$cljs.spec.alpha/form","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",11,"~:method-params",["^V",[["^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"~:variadic?",false,"^Q",181,"~:ret-tag","~$any","^S",181,"~:max-fixed-arity",1,"~:fn-var",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns the spec as data"],"~$->t_cljs$spec$alpha33989",["^ ","^N",null,"^O",["^ ","~:anonymous",true,"~:protocols",["^6",["~$cljs.spec.alpha/Spec","~$cljs.core/IMeta","~$cljs.spec.alpha/Specize","~$cljs.core/IWithMeta"]],"~:skip-protocol-flag",["^6",["^1;","^1="]],"~:factory","~:positional","^U",["^V",["^W",["^V",[["^X","~$meta33990"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33989.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33989","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^X","^1A"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",1391,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha33989","^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1A"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33989."],"~$nilable-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1407,"^R",19,"^S",1407,"^T",31,"~:skip-wiki",true,"^U",["^V",["^W",["^V",[["^M","~$pred","~$gfn"]]]]],"^Y","Do not call this directly, use 'nilable'"],"^=","~$cljs.spec.alpha/nilable-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",31,"^[",["^V",[["^M","^1F","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1407,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha33992","^S",1407,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^M","^1F","^1G"]]]]],"^Y","Do not call this directly, use 'nilable'"],"~$*recursion-limit*",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",21,"^R",16,"^S",21,"^T",33,"~:dynamic",true],"^=","~$cljs.spec.alpha/*recursion-limit*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",33,"^R",1,"^1K",true,"^Q",21,"^S",21,"~:tag","~$number","^Y","A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."],"~$*coll-error-limit*",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",35,"^R",16,"^S",35,"^T",34,"^1K",true],"^=","~$cljs.spec.alpha/*coll-error-limit*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",34,"^R",1,"^1K",true,"^Q",35,"^S",35,"^1M","^1N","^Y","The number of errors reported by explain in a collection spec'ed with 'every'"],"~$empty-coll",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",841,"^R",16,"^S",841,"^T",26,"~:private",true],"^1R",true,"^=","~$cljs.spec.alpha/empty-coll","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",26,"^R",1,"^Q",841,"^S",841,"^1M","~$cljs.core/IMap"],"~$->t_cljs$spec$alpha33771",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["~$forms","~$preds","^1G","~$meta33772"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33771.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33771","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^1V","^1W","^1G","^1X"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",3,"^12",false,"^1?","^1@","^Q",816,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha33771","^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^1G","^1X"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33771."],"~$explain-printer",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",235,"^R",7,"^S",235,"^T",22,"^U",["^V",["^W",["^V",[["~$ed"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"^=","~$cljs.spec.alpha/explain-printer","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",22,"^[",["^V",[["^20"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",235,"^13","~$clj-nil","^S",235,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^20"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"~$op-explain",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1159,"^R",8,"^S",1159,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["^M","~$p","~$path","~$via","~$in","~$input"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/op-explain","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^M","~$p","^24","^25","^26","^27"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1159,"^13",["^6",["~$cljs.core/IVector","^14","^22"]],"^S",1159,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p","^24","^25","^26","^27"]]]]]],"~$Specize",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",131,"^R",14,"^S",131,"^T",21,"~:protocol-symbol",true,"~:jsdoc",["^V",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$specize*",[["~$_"],["~$_","^M"]]]]],"^2;",true,"^=","^1<","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",21,"^R",1,"^Q",131,"^2=",["^ ","^2>",["^ ","^2?",[["~$_"],["~$_","^M"]]]],"~:info",null,"^S",131,"^1M","^14","~:impls",["^6",["~$cljs.core/Keyword","~$cljs.spec.alpha/t_cljs$spec$alpha33783","^1I","^1C","~$default","^1Z","~$cljs.spec.alpha/t_cljs$spec$alpha33676","~$cljs.spec.alpha/t_cljs$spec$alpha33665","~$cljs.core/PersistentHashSet","~$cljs.spec.alpha/t_cljs$spec$alpha33690","~$cljs.core/PersistentTreeSet","~$cljs.core/Symbol","~$cljs.spec.alpha/t_cljs$spec$alpha33699","~$cljs.spec.alpha/t_cljs$spec$alpha33757","~$cljs.spec.alpha/t_cljs$spec$alpha33964","~$cljs.spec.alpha/t_cljs$spec$alpha33957","~$cljs.spec.alpha/t_cljs$spec$alpha33609"]],"^2<",["^V",["@interface"]]],"~$->t_cljs$spec$alpha33757",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^1V","^1W","^1G","~$specs","~$cform","~$meta33758"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33757.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33757","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^1V","^1W","^1G","^2Q","^2R","^2S"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",780,"^13","^2L","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^1G","^2Q","^2R","^2S"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33757."],"~$alt-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1044,"^R",19,"^S",1044,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["~$ks","~$ps","^1V"]]]]],"^Y","Do not call this directly, use 'alt'"],"^=","~$cljs.spec.alpha/alt-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^2V","^2W","^1V"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1044,"^13",["^6",["~$clj","^14"]],"^S",1044,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2V","^2W","^1V"]]]]],"^Y","Do not call this directly, use 'alt'"],"~$tagged-ret",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",656,"^R",8,"^S",656,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["~$tag","~$ret"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/tagged-ret","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^2[","^30"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",656,"^13","~$cljs.core/MapEntry","^S",656,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^2[","^30"]]]]]],"~$pvalid?",["^ ","^N",null,"^O",["^ ","^1R",true,"^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"~:top-fn",["^ ","^12",false,"~:fixed-arity",3,"^15",3,"^[",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^U",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^11",["^V",[null,null]]],"^R",8,"^Q",380,"^S",380,"^U",["^V",["^W",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]]]],"^Y","internal helper function that returns true when x is valid for spec."],"^1R",true,"^=","~$cljs.spec.alpha/pvalid?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^34",["^ ","^12",false,"^35",3,"^15",3,"^[",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^U",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^10",null,"^35",3,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",2,"^12",false,"^1M","~$boolean"],["^ ","^35",3,"^12",false,"^1M","^37"]],"^Q",380,"^S",380,"^15",3,"^16",true,"^U",["^V",[["^1F","~$x"],["^1F","~$x","^M"]]],"^Y","internal helper function that returns true when x is valid for spec."],"~$t_cljs$spec$alpha33699",["^ ","~:num-fields",9,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2K","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","~:type",true,"^18",true,"^R",5,"^Q",697,"~:record",false,"^1M","~$function","^1>",["^6",["^1;","^1="]]],"~$->t_cljs$spec$alpha33676",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^M","~$mmvar","~$retag","^1G","~$id","~$predx","~$dval","^2[","~$meta33677"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33676.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33676","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^M","^3>","^3?","^1G","^3@","^3A","^3B","^2[","^3C"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",6,"^12",false,"^1?","^1@","^Q",556,"^13","^2E","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^M","^3>","^3?","^1G","^3@","^3A","^3B","^2[","^3C"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33676."],"~$def-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",306,"^R",19,"^S",306,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"^=","~$cljs.spec.alpha/def-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["~$k","^M","^X"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",306,"^S",306,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"~$*explain-out*",["^ ","^=","~$cljs.spec.alpha/*explain-out*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",262,"^R",1,"^S",262,"^T",29,"^1K",true,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",262,"^R",16,"^S",262,"^T",29,"^1K",true]],"~$t_cljs$spec$alpha33757",["^ ","^39",6,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2L","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",5,"^Q",780,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$*runtime-asserts*",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1479,"^R",3,"^S",1479,"^T",20,"^1R",true,"^1K",true],"^1R",true,"^=","~$cljs.spec.alpha/*runtime-asserts*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^R",1,"^1K",true,"^Q",1477,"^S",1479,"^1M","^37"],"~$t_cljs$spec$alpha33964",["^ ","^39",9,"^19",["^6",["^1:","^1;","^1<","^1=","~$cljs.core/ILookup"]],"^=","^2M","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",5,"^Q",1343,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1=","^3M"]]],"~$regex-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1291,"^R",19,"^S",1291,"^T",34,"^1E",true,"^U",["^V",["^W",["^V",[["~$re","^1G"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"^=","~$cljs.spec.alpha/regex-spec-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",34,"^[",["^V",[["^3O","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1291,"^13","^2N","^S",1291,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^3O","^1G"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"~$merge-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",813,"^R",19,"^S",813,"^T",34,"^1E",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^1G"]]]]],"^Y","Do not call this directly, use 'merge'"],"^=","~$cljs.spec.alpha/merge-spec-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",34,"^[",["^V",[["^1V","^1W","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",813,"^13","^1Z","^S",813,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^1G"]]]]],"^Y","Do not call this directly, use 'merge'"],"~$explain-data*",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",219,"^R",7,"^S",219,"^T",20,"^U",["^V",["^W",["^V",[["^X","^24","^25","^26","~$x"]]]]]],"^=","~$cljs.spec.alpha/explain-data*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^X","^24","^25","^26","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",219,"^13",["^6",["^1T","^22"]],"^S",219,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^24","^25","^26","~$x"]]]]]],"~$add-ret",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1110,"^R",8,"^S",1110,"^T",15,"^1R",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/add-ret","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["~$p","~$r","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1110,"^13",["^6",[null,"^2Y","^14"]],"^S",1110,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"~$explain-pred-list",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",738,"^R",8,"^S",738,"^T",25,"^1R",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^24","^25","^26","~$x"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/explain-pred-list","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",25,"^[",["^V",[["^1V","^1W","^24","^25","^26","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",738,"^13",["^6",["^29","^14","^22"]],"^S",738,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^24","^25","^26","~$x"]]]]]],"~$->t_cljs$spec$alpha33964",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1=","^3M"]],"^1>",["^6",["^1;","^1=","^3M"]],"^1?","^1@","^U",["^V",["^W",["^V",[["~$argspec","~$aform","~$retspec","~$rform","~$fnspec","~$fform","^1G","^2Q","~$meta33965"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33964.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1=","^3M"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33964","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^3Z","^3[","^40","^41","^42","^43","^1G","^2Q","^44"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",1343,"^13","^2M","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^3Z","^3[","^40","^41","^42","^43","^1G","^2Q","^44"]]]]],"^1>",["^6",["^1;","^1=","^3M"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33964."],"~$MAX_INT",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",19,"^R",14,"^S",19,"^T",21,"~:const",true],"^=","~$cljs.spec.alpha/MAX_INT","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",21,"~:const-expr",["^ ","~:op","^47","~:val",9007199254740991,"~:env",["^ ","~:context","~:expr"],"~:form",9007199254740991,"^1M","^1N"],"^R",1,"^47",true,"^Q",19,"^S",19,"^1M","^1N"],"~$t_cljs$spec$alpha33783",["^ ","^39",25,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2C","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",6,"^Q",881,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$check-asserts",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1487,"^R",7,"^S",1487,"^T",20,"^U",["^V",["^W",["^V",[["~$flag"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"^=","~$cljs.spec.alpha/check-asserts","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^4B"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1487,"^S",1487,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^4B"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"~$alt2",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1042,"^R",8,"^S",1042,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["~$p1","~$p2"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/alt2","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^4E","^4F"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1042,"^13",["^6",[null,"^14","^1T","^22"]],"^S",1042,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^4E","^4F"]]]]]],"~$and-k-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",417,"^R",8,"^S",417,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"^1R",true,"^=","~$cljs.spec.alpha/and-k-gen","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["~$s"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",417,"^13","^14","^S",417,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"~$assert*",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1495,"^R",7,"^S",1495,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"^=","~$cljs.spec.alpha/assert*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1495,"^S",1495,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"~$fn-sym",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",123,"^R",8,"^S",123,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["~$f-n"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/fn-sym","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^4M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",123,"^13",["^6",["^14","^2J","^22"]],"^S",123,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^4M"]]]]]],"~$inst-in-range?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1442,"^R",7,"^S",1442,"^T",21,"^U",["^V",["^W",["^V",[["~$start","~$end","~$inst"]]]]],"^Y","Return true if inst at or after start and before end"],"^=","~$cljs.spec.alpha/inst-in-range?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",21,"^[",["^V",[["^4P","^4Q","^4R"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1442,"^13","^37","^S",1442,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^4P","^4Q","^4R"]]]]],"^Y","Return true if inst at or after start and before end"],"~$registry-ref",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",47,"^R",20,"^S",47,"^T",32,"^1R",true],"^1R",true,"^=","~$cljs.spec.alpha/registry-ref","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",32,"^R",1,"^Q",47,"^S",47,"^1M","~$cljs.core/Atom"],"~$accept?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",979,"^R",8,"^S",979,"^T",15,"^1R",true,"^U",["^V",["^W",["^V",[[["^ ","~:keys",["~:cljs.spec.alpha/op"]]]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/accept?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["~$p__33832"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",979,"^13","^37","^S",979,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^4X",["^4Y"]]]]]]]],"~$and-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",749,"^R",19,"^S",749,"^T",32,"^1E",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^1G"]]]]],"^Y","Do not call this directly, use 'and'"],"^=","~$cljs.spec.alpha/and-spec-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",32,"^[",["^V",[["^1V","^1W","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",749,"^13","^2L","^S",749,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^1G"]]]]],"^Y","Do not call this directly, use 'and'"],"~$accept",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",977,"^R",8,"^S",977,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/accept","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",977,"^13","^1T","^S",977,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"~$t_cljs$spec$alpha33771",["^ ","^39",4,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^1Z","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",3,"^Q",816,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$recur-limit?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",351,"^R",8,"^S",351,"^T",20,"^1R",true,"^U",["^V",["^W",["^V",[["~$rmap","^3@","^24","~$k"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/recur-limit?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^56","^3@","^24","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",351,"^13","^37","^S",351,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^56","^3@","^24","~$k"]]]]]],"~$t_cljs$spec$alpha33989",["^ ","^39",2,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^1C","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",5,"^Q",1391,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$describe*",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",45,"^R",4,"^S",45,"^T",13,"~:protocol","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^5:","^1:","^=","~$cljs.spec.alpha/describe*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",45,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y",null],"~$map-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",423,"^R",19,"^S",423,"^T",32,"^1E",true,"^U",["^V",["^W",["^V",[[["^ ","^4X",["~$req-un","~$opt-un","~$keys-pred","~$pred-exprs","~$opt-keys","~$req-specs","~$req","~$req-keys","~$opt-specs","~$pred-forms","~$opt","^1G"],"~:as","~$argm"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"^=","~$cljs.spec.alpha/map-spec-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",32,"^[",["^V",[["~$p__33606"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",423,"^13","^2O","^S",423,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^4X",["^5=","^5>","^5?","^5@","^5A","^5B","^5C","^5D","^5E","^5F","^5G","^1G"],"^5H","^5I"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"~$reg-resolve!",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",66,"^R",8,"^S",66,"^T",20,"^1R",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"^1R",true,"^=","~$cljs.spec.alpha/reg-resolve!","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",66,"^13",["^6",[null,"^14"]],"^S",66,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"~$re-explain",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1265,"^R",8,"^S",1265,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["^24","^25","^26","^3O","^27"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/re-explain","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^24","^25","^26","^3O","^27"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1265,"^13",["^6",["^29","^14","^22"]],"^S",1265,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^24","^25","^26","^3O","^27"]]]]]],"~$alts",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1041,"^R",8,"^S",1041,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["~$&","^2W"]]]]],"^34",["^ ","^12",true,"^35",0,"^15",0,"^[",[["^V",["^2W"]]],"^U",["^V",[["~$&","^2W"]]],"^11",["^V",[null]]]],"^1R",true,"^=","~$cljs.spec.alpha/alts","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^34",["^ ","^12",true,"^35",0,"^15",0,"^[",[["^V",["^2W"]]],"^U",["^V",[["~$&","^2W"]]],"^11",["^V",[null]]],"^[",[["^V",["^2W"]]],"^10",null,"^35",0,"^11",["^V",[null]],"^R",1,"^12",true,"^2>",[["^ ","^35",0,"^12",true,"^1M",["^6",["^14","^1T","^22"]]]],"^Q",1041,"^13","^14","^S",1041,"^15",0,"^16",true,"^U",["^V",[["~$&","^2W"]]]],"~$with-name",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",85,"^R",8,"^S",85,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["^X","~$name"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/with-name","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["^X","^5S"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",85,"^13",["^6",["^2Y","^14","^2B","^2J","~$cljs.core/MetaFn","^22"]],"^S",85,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^5S"]]]]]],"~$->t_cljs$spec$alpha33783",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^M","~$max-count","~$map__33781","~$p__33780","~$check?","^1G","~$gen-max","^1F","~$cpred","~$conform-keys","~$kind-form","~$addcv","~$cfns","~$describe-form","~$distinct","^X","~$kfn","~$gen-into","~$count","~$min-count","~$opts","~$kind","~$conform-all","~$conform-into","~$meta33784"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33783.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33783","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^M","^5W","^5X","^5Y","^5Z","^1G","^5[","^1F","^60","^61","^62","^63","^64","^65","^66","^X","^67","^68","^69","^6:","^6;","^6<","^6=","^6>","^6?"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",6,"^12",false,"^1?","^1@","^Q",881,"^13","^2C","^15",25,"^16",true,"^U",["^V",["^W",["^V",[["^M","^5W","^5X","^5Y","^5Z","^1G","^5[","^1F","^60","^61","^62","^63","^64","^65","^66","^X","^67","^68","^69","^6:","^6;","^6<","^6=","^6>","^6?"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33783."],"~$explain",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",270,"^R",7,"^S",270,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"^=","~$cljs.spec.alpha/explain","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",270,"^13","^14","^S",270,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"~$spec-name",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",93,"^R",8,"^S",93,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/spec-name","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",93,"^13",["^6",["^14","^2B","^2J","^22"]],"^S",93,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"~$map-spec",["^ ","^=","~$cljs.spec.alpha/map-spec","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",335,"^R",1,"^S",335,"^T",18,"~:declared",true,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",335,"^R",10,"^S",335,"^T",18,"^6G",true]],"~$with-gen*",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",44,"^R",4,"^S",44,"^T",13,"^5:","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","^1G"]]]]]],"^5:","^1:","^=","~$cljs.spec.alpha/with-gen*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^X","^1G"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",44,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1G"]]]]],"^Y",null],"~$k-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",397,"^R",8,"^S",397,"^T",13,"^1R",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"^1R",true,"^=","~$cljs.spec.alpha/k-gen","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",397,"^13",["^6",["^14","^22"]],"^S",397,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"~$or-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",659,"^R",19,"^S",659,"^T",31,"^1E",true,"^U",["^V",["^W",["^V",[["^:","^1V","^1W","^1G"]]]]],"^Y","Do not call this directly, use 'or'"],"^=","~$cljs.spec.alpha/or-spec-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",31,"^[",["^V",[["^:","^1V","^1W","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",659,"^13","^2K","^S",659,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^:","^1V","^1W","^1G"]]]]],"^Y","Do not call this directly, use 'or'"],"~$specize",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",159,"^R",8,"^S",159,"^T",15,"^1R",true,"^U",["^V",["^W",["^V",[["~$s"],["~$s","^M"]]]]],"^34",["^ ","^12",false,"^35",2,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]]],"^1R",true,"^=","~$cljs.spec.alpha/specize","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^34",["^ ","^12",false,"^35",2,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["~$s","^M"]]],"^10",null,"^35",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",1,"^12",false,"^1M",["^6",[null,"^14","^22"]]],["^ ","^35",2,"^12",false,"^1M",["^6",[null,"^14","^22"]]]],"^Q",159,"^S",159,"^15",2,"^16",true,"^U",["^V",[["~$s"],["~$s","^M"]]]],"~$*fspec-iterations*",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",27,"^R",16,"^S",27,"^T",34,"^1K",true],"^=","~$cljs.spec.alpha/*fspec-iterations*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",34,"^R",1,"^1K",true,"^Q",27,"^S",27,"^1M","^1N","^Y","The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"],"~$Spec",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",39,"^R",14,"^S",39,"^T",18,"^2;",true,"^2<",["^V",["@interface"]],"^2=",["^ ","^2>",["^ ","~$conform*",[["^X","~$x"]],"~$unform*",[["^X","~$y"]],"~$explain*",[["^X","^24","^25","^26","~$x"]],"~$gen*",[["^X","~$overrides","^24","^56"]],"^6H",[["^X","^1G"]],"^59",[["^X"]]]]],"^2;",true,"^=","^1:","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^R",1,"^Q",39,"^2=",["^ ","^2>",["^ ","^6S",[["^X","~$x"]],"^6T",[["^X","~$y"]],"^6U",[["^X","^24","^25","^26","~$x"]],"^6V",[["^X","^6W","^24","^56"]],"^6H",[["^X","^1G"]],"^59",[["^X"]]]],"^2@",null,"^S",39,"^1M","^14","^2A",["^6",["^2C","^1I","^1C","^1Z","^2E","^2F","^2H","^2K","^2L","^2M","^2N","^2O"]],"^2<",["^V",["@interface"]]],"~$unform",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",174,"^R",7,"^S",174,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"^=","~$cljs.spec.alpha/unform","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",174,"^13","^14","^S",174,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"~$valid?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",371,"^R",7,"^S",371,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"],["^X","~$x","^M"]]]]],"^Y","Helper function that returns true when x is valid for spec.","^34",["^ ","^12",false,"^35",3,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/valid?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^34",["^ ","^12",false,"^35",3,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^10",null,"^35",3,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",2,"^12",false,"^1M","^37"],["^ ","^35",3,"^12",false,"^1M","^37"]],"^Q",371,"^S",371,"^15",3,"^16",true,"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^Y","Helper function that returns true when x is valid for spec."],"~$t_cljs$spec$alpha33676",["^ ","^39",9,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2E","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",6,"^Q",556,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"^F",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",293,"^R",7,"^S",293,"^T",10,"^U",["^V",["^W",["^V",[["^X"],["^X","^6W"]]]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","^34",["^ ","^12",false,"^35",2,"^15",2,"^[",["^V",[["^X"],["^X","^6W"]]],"^U",["^V",[["^X"],["^X","^6W"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/gen","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",10,"^34",["^ ","^12",false,"^35",2,"^15",2,"^[",["^V",[["^X"],["^X","^6W"]]],"^U",["^V",[["^X"],["^X","^6W"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X"],["^X","^6W"]]],"^10",null,"^35",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",1,"^12",false,"^1M","^14"],["^ ","^35",2,"^12",false,"^1M","^14"]],"^Q",293,"^S",293,"^15",2,"^16",true,"^U",["^V",[["^X"],["^X","^6W"]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"],"~$->t_cljs$spec$alpha33957",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^3O","^1G","~$meta33958"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33957.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33957","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^3O","^1G","^73"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",3,"^12",false,"^1?","^1@","^Q",1294,"^13","^2N","^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^3O","^1G","^73"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33957."],"~$nonconforming",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1386,"^R",7,"^S",1386,"^T",20,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^=","~$cljs.spec.alpha/nonconforming","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1386,"^13","^1C","^S",1386,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^6T",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",41,"^R",4,"^S",41,"^T",11,"^5:","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]]],"^5:","^1:","^=","~$cljs.spec.alpha/unform*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",11,"^[",["^V",[["^X","~$y"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",41,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]],"^Y",null],"~$->sym",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",323,"^R",8,"^S",323,"^T",13,"^1R",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"^1R",true,"^=","~$cljs.spec.alpha/->sym","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",323,"^13",["^6",[null,"^14"]],"^S",323,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"~$abbrev",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",187,"^R",7,"^S",187,"^T",13,"^U",["^V",["^W",["^V",[["^M"]]]]]],"^=","~$cljs.spec.alpha/abbrev","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",187,"^13",["^6",[null,"^14","^2J"]],"^S",187,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^M"]]]]]],"~$->t_cljs$spec$alpha33992",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^M","^1F","^1G","^X","~$meta33993"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33992.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33992","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^M","^1F","^1G","^X","^7="]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",1411,"^13","^1I","^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^M","^1F","^1G","^X","^7="]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33992."],"~$regex?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",80,"^R",7,"^S",80,"^T",13,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"^=","~$cljs.spec.alpha/regex?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",80,"^13",["^6",[null,"^14"]],"^S",80,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"~$or-k-gen",["^ ","^N",null,"^O",["^ ","^1R",true,"^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",16,"^34",["^ ","^12",false,"^35",2,"^15",2,"^[",["^V",[["~$s"],["^6:","~$s"]]],"^U",["^V",[["~$s"],["^6:","~$s"]]],"^11",["^V",[null,null]]],"^R",8,"^Q",406,"^S",406,"^U",["^V",["^W",["^V",[["~$s"],["^6:","~$s"]]]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"^1R",true,"^=","~$cljs.spec.alpha/or-k-gen","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",16,"^34",["^ ","^12",false,"^35",2,"^15",2,"^[",["^V",[["~$s"],["^6:","~$s"]]],"^U",["^V",[["~$s"],["^6:","~$s"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["^6:","~$s"]]],"^10",null,"^35",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",1,"^12",false,"^1M","^14"],["^ ","^35",2,"^12",false,"^1M","^14"]],"^Q",406,"^S",406,"^15",2,"^16",true,"^U",["^V",[["~$s"],["^6:","~$s"]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"~$int-in-range?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1449,"^R",7,"^S",1449,"^T",20,"^U",["^V",["^W",["^V",[["^4P","^4Q","~$val"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"^=","~$cljs.spec.alpha/int-in-range?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^4P","^4Q","^7D"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1449,"^13",["^6",["^37","^14"]],"^S",1449,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^4P","^4Q","^7D"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"~$->t_cljs$spec$alpha33690",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^1V","^1W","^1G","^2Q","~$cnt","~$meta33691"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33690.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33690","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^1V","^1W","^1G","^2Q","^7G","^7H"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",6,"^12",false,"^1?","^1@","^Q",600,"^13","^2H","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^1V","^1W","^1G","^2Q","^7G","^7H"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33690."],"~$dt",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",358,"^R",8,"^S",358,"^T",10,"^1R",true,"^U",["^V",["^W",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","~$cpred?"]]]]],"^34",["^ ","^12",false,"^35",4,"^15",4,"^[",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^7K"]]],"^U",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^7K"]]],"^11",["^V",[null,null]]]],"^1R",true,"^=","~$cljs.spec.alpha/dt","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",10,"^34",["^ ","^12",false,"^35",4,"^15",4,"^[",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^7K"]]],"^U",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^7K"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^7K"]]],"^10",null,"^35",4,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",3,"^12",false,"^1M","^14"],["^ ","^35",4,"^12",false,"^1M",["^6",[null,"^14","^2B"]]]],"^Q",358,"^S",358,"^15",4,"^16",true,"^U",["^V",[["^1F","~$x","^M"],["^1F","~$x","^M","^7K"]]]],"~$preturn",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1074,"^R",8,"^S",1074,"^T",15,"^1R",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/preturn","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1074,"^13",["^6",[null,"^14","^2B","^32","^22"]],"^S",1074,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$re-conform",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1252,"^R",8,"^S",1252,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","~$xs","^5H","~$data"]]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/re-conform","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["~$p","~$p__33938"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1252,"^13",["^6",[null,"^14","^2B","^32","^22"]],"^S",1252,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","^7P","^5H","^7Q"]]]]]]],"~$spec?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",74,"^R",7,"^S",74,"^T",12,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"^=","~$cljs.spec.alpha/spec?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",74,"^13",["^6",[null,"^22"]],"^S",74,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"~$registry",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",318,"^R",7,"^S",318,"^T",15,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"^=","~$cljs.spec.alpha/registry","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",318,"^13","^14","^S",318,"^15",0,"^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"~$rep+impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1010,"^R",19,"^S",1010,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"^=","~$cljs.spec.alpha/rep+impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1010,"^13",["^6",["^14","^1T","^22"]],"^S",1010,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"~$t_cljs$spec$alpha33992",["^ ","^39",5,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^1I","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",5,"^Q",1411,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$deriv",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1123,"^R",8,"^S",1123,"^T",13,"^1R",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/deriv","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1123,"^13",["^6",[null,"^14","^1T","^22"]],"^S",1123,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$deep-resolve",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",49,"^R",8,"^S",49,"^T",20,"^1R",true,"^U",["^V",["^W",["^V",[["~$reg","~$k"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/deep-resolve","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^[",["^V",[["^82","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",49,"^S",49,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^82","~$k"]]]]]],"~$exercise",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1433,"^R",7,"^S",1433,"^T",15,"^U",["^V",["^W",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6W"]]]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","^34",["^ ","^12",false,"^35",3,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6W"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6W"]]],"^11",["^V",[null,null,null]]]],"^=","~$cljs.spec.alpha/exercise","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^34",["^ ","^12",false,"^35",3,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6W"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6W"]]],"^11",["^V",[null,null,null]]],"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6W"]]],"^10",null,"^35",3,"^11",["^V",[null,null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",1,"^12",false,"^1M","^14"],["^ ","^35",2,"^12",false,"^1M","^14"],["^ ","^35",3,"^12",false,"^1M","~$cljs.core/LazySeq"]],"^Q",1433,"^S",1433,"^15",3,"^16",true,"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6W"]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"],"~$explain-data",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",226,"^R",7,"^S",226,"^T",19,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"^=","~$cljs.spec.alpha/explain-data","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",226,"^13",["^6",["^1T","^22"]],"^S",226,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"~$tuple-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",29,"^34",["^ ","^12",false,"^35",3,"^15",3,"^[",["^V",[["^1V","^1W"],["^1V","^1W","^1G"]]],"^U",["^V",[["^1V","^1W"],["^1V","^1W","^1G"]]],"^11",["^V",[null,null]]],"^1E",true,"^R",19,"^Q",594,"^S",594,"^U",["^V",["^W",["^V",[["^1V","^1W"],["^1V","^1W","^1G"]]]]],"^Y","Do not call this directly, use 'tuple'"],"^=","~$cljs.spec.alpha/tuple-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",29,"^34",["^ ","^12",false,"^35",3,"^15",3,"^[",["^V",[["^1V","^1W"],["^1V","^1W","^1G"]]],"^U",["^V",[["^1V","^1W"],["^1V","^1W","^1G"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^1V","^1W"],["^1V","^1W","^1G"]]],"^10",null,"^35",3,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",2,"^12",false,"^1M","^14"],["^ ","^35",3,"^12",false,"^1M","^2H"]],"^Q",594,"^S",594,"^15",3,"^16",true,"^U",["^V",[["^1V","^1W"],["^1V","^1W","^1G"]]],"^Y","Do not call this directly, use 'tuple'"],"~$multi-spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",34,"^34",["^ ","^12",false,"^35",4,"^15",4,"^[",["^V",[["^M","^3>","^3?"],["^M","^3>","^3?","^1G"]]],"^U",["^V",[["^M","^3>","^3?"],["^M","^3>","^3?","^1G"]]],"^11",["^V",[null,null]]],"^1E",true,"^R",19,"^Q",544,"^S",544,"^U",["^V",["^W",["^V",[["^M","^3>","^3?"],["^M","^3>","^3?","^1G"]]]]],"^Y","Do not call this directly, use 'multi-spec'"],"^=","~$cljs.spec.alpha/multi-spec-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",34,"^34",["^ ","^12",false,"^35",4,"^15",4,"^[",["^V",[["^M","^3>","^3?"],["^M","^3>","^3?","^1G"]]],"^U",["^V",[["^M","^3>","^3?"],["^M","^3>","^3?","^1G"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^3>","^3?"],["^M","^3>","^3?","^1G"]]],"^10",null,"^35",4,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",3,"^12",false,"^1M","^14"],["^ ","^35",4,"^12",false,"^1M","^2E"]],"^Q",544,"^S",544,"^15",4,"^16",true,"^U",["^V",[["^M","^3>","^3?"],["^M","^3>","^3?","^1G"]]],"^Y","Do not call this directly, use 'multi-spec'"],"~$conform",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",168,"^R",7,"^S",168,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^=","~$cljs.spec.alpha/conform","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",168,"^13","^14","^S",168,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"~$t_cljs$spec$alpha33957",["^ ","^39",3,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2N","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",3,"^Q",1294,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$->t_cljs$spec$alpha33699",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^:","^1V","^1W","^1G","^3@","~$kps","^2Q","^2R","~$meta33700"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33699.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33699","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^:","^1V","^1W","^1G","^3@","^8A","^2Q","^2R","^8B"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",697,"^13","^2K","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^:","^1V","^1W","^1G","^3@","^8A","^2Q","^2R","^8B"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33699."],"^6V",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",43,"^R",4,"^S",43,"^T",8,"^5:","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","^6W","^24","^56"]]]]]],"^5:","^1:","^=","~$cljs.spec.alpha/gen*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",8,"^[",["^V",[["^X","^6W","^24","^56"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",43,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^X","^6W","^24","^56"]]]]],"^Y",null],"~$fspec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1339,"^R",19,"^S",1339,"^T",29,"^1E",true,"^U",["^V",["^W",["^V",[["^3Z","^3[","^40","^41","^42","^43","^1G"]]]]],"^Y","Do not call this directly, use 'fspec'"],"^=","~$cljs.spec.alpha/fspec-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",29,"^[",["^V",[["^3Z","^3[","^40","^41","^42","^43","^1G"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1339,"^13","^2M","^S",1339,"^15",7,"^16",true,"^U",["^V",["^W",["^V",[["^3Z","^3[","^40","^41","^42","^43","^1G"]]]]],"^Y","Do not call this directly, use 'fspec'"],"~$t_cljs$spec$alpha33609",["^ ","^39",19,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2O","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",5,"^Q",430,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$inck",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",355,"^R",8,"^S",355,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/inck","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["~$m","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",355,"^13",["^6",["^2Y","^14"]],"^S",355,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"~$*coll-check-limit*",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",31,"^R",16,"^S",31,"^T",34,"^1K",true],"^=","~$cljs.spec.alpha/*coll-check-limit*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",34,"^R",1,"^1K",true,"^Q",31,"^S",31,"^1M","^1N","^Y","The number of items validated in a collection spec'ed with 'every'"],"~$get-spec",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",330,"^R",7,"^S",330,"^T",15,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"^=","~$cljs.spec.alpha/get-spec","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",330,"^13",["^6",["^14","^22"]],"^S",330,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"~$gensub",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",282,"^R",8,"^S",282,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["^X","^6W","^24","^56","^M"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/gensub","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^X","^6W","^24","^56","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",282,"^13","^14","^S",282,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^6W","^24","^56","^M"]]]]]],"~$the-spec",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",116,"^R",8,"^S",116,"^T",16,"^1R",true,"^U",["^V",["^W",["^V",[["~$spec-or-k"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"^1R",true,"^=","~$cljs.spec.alpha/the-spec","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",16,"^[",["^V",[["^8Q"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",116,"^13",["^6",["^14","^22"]],"^S",116,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8Q"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"~$coll-prob",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",793,"^R",8,"^S",793,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["~$x","^67","~$kform","^66","^69","^6:","^5W","^24","^25","^26"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/coll-prob","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["~$x","^67","^8T","^66","^69","^6:","^5W","^24","^25","^26"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",793,"^13",["^6",["^29","^14","^22"]],"^S",793,"^15",10,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^67","^8T","^66","^69","^6:","^5W","^24","^25","^26"]]]]]],"~$every-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",29,"^34",["^ ","^12",false,"^35",4,"^15",4,"^[",["^V",[["^M","^1F","^6;"],["^M","^1F",["^ ","^6>","~:into","^65","~:cljs.spec.alpha/describe","^4X",["^6<","~:cljs.spec.alpha/kind-form","^69","^5W","^6:","^66","^5[","~:cljs.spec.alpha/kfn","~:cljs.spec.alpha/cpred","^61","~:cljs.spec.alpha/conform-all"],"~:or",["^ ","^5[",20],"^5H","^6;"],"^1G"]]],"^U",["^V",[["^M","^1F","^6;"],["^M","^1F",["^ ","^6>","^8W","^65","^8X","^4X",["^6<","^8Y","^69","^5W","^6:","^66","^5[","^8Z","^8[","^61","^90"],"^91",["^ ","^5[",20],"^5H","^6;"],"^1G"]]],"^11",["^V",[null,null]]],"^1E",true,"^R",19,"^Q",843,"^S",843,"^U",["^V",["^W",["^V",[["^M","^1F","^6;"],["^M","^1F",["^ ","^6>","^8W","^65","^8X","^4X",["^6<","^8Y","^69","^5W","^6:","^66","^5[","^8Z","^8[","^61","^90"],"^91",["^ ","^5[",20],"^5H","^6;"],"^1G"]]]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"^=","~$cljs.spec.alpha/every-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",29,"^34",["^ ","^12",false,"^35",4,"^15",4,"^[",["^V",[["^M","^1F","^6;"],["^M","^1F",["^ ","^6>","^8W","^65","^8X","^4X",["^6<","^8Y","^69","^5W","^6:","^66","^5[","^8Z","^8[","^61","^90"],"^91",["^ ","^5[",20],"^5H","^6;"],"^1G"]]],"^U",["^V",[["^M","^1F","^6;"],["^M","^1F",["^ ","^6>","^8W","^65","^8X","^4X",["^6<","^8Y","^69","^5W","^6:","^66","^5[","^8Z","^8[","^61","^90"],"^91",["^ ","^5[",20],"^5H","^6;"],"^1G"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^1F","^6;"],["^M","^1F",["^ ","^6>","^8W","^65","^8X","^4X",["^6<","^8Y","^69","^5W","^6:","^66","^5[","^8Z","^8[","^61","^90"],"^91",["^ ","^5[",20],"^5H","^6;"],"^1G"]]],"^10",null,"^35",4,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",3,"^12",false,"^1M","^14"],["^ ","^35",4,"^12",false,"^1M","^2C"]],"^Q",843,"^S",843,"^15",4,"^16",true,"^U",["^V",[["^M","^1F","^6;"],["^M","^1F",["^ ","^6>","^8W","^65","^8X","^4X",["^6<","^8Y","^69","^5W","^6:","^66","^5[","^8Z","^8[","^61","^90"],"^91",["^ ","^5[",20],"^5H","^6;"],"^1G"]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"~$accept-nil?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1060,"^R",8,"^S",1060,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/accept-nil?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1060,"^13",["^6",["^37","^14","^22"]],"^S",1060,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$t_cljs$spec$alpha33690",["^ ","^39",6,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2H","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",6,"^Q",600,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$maybe-spec",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",105,"^R",8,"^S",105,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["^8Q"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"^1R",true,"^=","~$cljs.spec.alpha/maybe-spec","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^8Q"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",105,"^13",["^6",[null,"^2Y","^14","^2B","^2J","^5U","^22"]],"^S",105,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8Q"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"~$spec-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",28,"^34",["^ ","^12",false,"^35",5,"^15",5,"^[",["^V",[["^M","^1F","^1G","^7K"],["^M","^1F","^1G","^7K","~$unc"]]],"^U",["^V",[["^M","^1F","^1G","^7K"],["^M","^1F","^1G","^7K","^99"]]],"^11",["^V",[null,null]]],"^1E",true,"^R",19,"^Q",511,"^S",511,"^U",["^V",["^W",["^V",[["^M","^1F","^1G","^7K"],["^M","^1F","^1G","^7K","^99"]]]]],"^Y","Do not call this directly, use 'spec'"],"^=","~$cljs.spec.alpha/spec-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",28,"^34",["^ ","^12",false,"^35",5,"^15",5,"^[",["^V",[["^M","^1F","^1G","^7K"],["^M","^1F","^1G","^7K","^99"]]],"^U",["^V",[["^M","^1F","^1G","^7K"],["^M","^1F","^1G","^7K","^99"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^1F","^1G","^7K"],["^M","^1F","^1G","^7K","^99"]]],"^10",null,"^35",5,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",4,"^12",false,"^1M","^14"],["^ ","^35",5,"^12",false,"^1M",["^6",[null,"^2Y","^14","^2F","^22"]]]],"^Q",511,"^S",511,"^15",5,"^16",true,"^U",["^V",[["^M","^1F","^1G","^7K"],["^M","^1F","^1G","^7K","^99"]]],"^Y","Do not call this directly, use 'spec'"],"~$t_cljs$spec$alpha33665",["^ ","^39",6,"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","^2F","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^3:",true,"^18",true,"^R",6,"^Q",520,"^3;",false,"^1M","^3<","^1>",["^6",["^1;","^1="]]],"~$->t_cljs$spec$alpha33609",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["~$keys->specnames","^5G","^5=","^5>","^1G","^5@","^5?","^5I","^5A","~$map__33607","^5B","^5K","^5C","^3@","^5D","^5E","~$k->s","^5F","~$meta33610"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33609.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33609","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^9=","^5G","^5=","^5>","^1G","^5@","^5?","^5I","^5A","^9>","^5B","^5K","^5C","^3@","^5D","^5E","^9?","^5F","^9@"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",5,"^12",false,"^1?","^1@","^Q",430,"^13","^2O","^15",19,"^16",true,"^U",["^V",["^W",["^V",[["^9=","^5G","^5=","^5>","^1G","^5@","^5?","^5I","^5A","^9>","^5B","^5K","^5C","^3@","^5D","^5E","^9?","^5F","^9@"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33609."],"~$invalid?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",163,"^R",7,"^S",163,"^T",15,"^U",["^V",["^W",["^V",[["^30"]]]]],"^Y","tests the validity of a conform return value"],"^=","~$cljs.spec.alpha/invalid?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["^30"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",163,"^13","^37","^S",163,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^30"]]]]],"^Y","tests the validity of a conform return value"],"~$amp-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1015,"^R",19,"^S",1015,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["^3O","~$re-form","^1W","^5F"]]]]],"^Y","Do not call this directly, use '&'"],"^=","~$cljs.spec.alpha/amp-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^3O","^9E","^1W","^5F"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1015,"^13","^1T","^S",1015,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^3O","^9E","^1W","^5F"]]]]],"^Y","Do not call this directly, use '&'"],"~$pcat*",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",982,"^R",8,"^S",982,"^T",13,"^1R",true,"^U",["^V",["^W",["^V",[[["~#cmap",[["^4E","~$&","~$pr","^5H","^2W"],"~:ps",["~$k1","~$&","~$kr","^5H","^2V"],"~:ks",["~$f1","~$&","~$fr","^5H","^1V"],"~:forms","^30","~:ret","~$rep+","~:rep+"]]]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/pcat*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",13,"^[",["^V",[["~$p__33835"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",982,"^13",["^6",["^14","^1T","^22"]],"^S",982,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^9H",[["^4E","~$&","^9I","^5H","^2W"],"^9J",["^9K","~$&","^9L","^5H","^2V"],"^9M",["^9N","~$&","^9O","^5H","^1V"],"^9P","^30","^9Q","^9R","^9S"]]]]]]]],"~$alt*",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1029,"^R",8,"^S",1029,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["^2W","^2V","^1V"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/alt*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^2W","^2V","^1V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1029,"^13",["^6",["^14","^1T","^22"]],"^S",1029,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2W","^2V","^1V"]]]]]],"~$cat-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",994,"^R",19,"^S",994,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["^2V","^2W","^1V"]]]]],"^Y","Do not call this directly, use 'cat'"],"^=","~$cljs.spec.alpha/cat-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^2V","^2W","^1V"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",994,"^13",["^6",["^14","^1T","^22"]],"^S",994,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2V","^2W","^1V"]]]]],"^Y","Do not call this directly, use 'cat'"],"~$macroexpand-check",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",337,"^R",8,"^S",337,"^T",25,"^1R",true,"^U",["^V",["^W",["^V",[["~$v","~$args"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/macroexpand-check","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",25,"^[",["^V",[["~$v","^9["]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",337,"^13","^22","^S",337,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$v","^9["]]]]]],"~$reg-resolve",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",55,"^R",8,"^S",55,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"^1R",true,"^=","~$cljs.spec.alpha/reg-resolve","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",55,"^13",["^6",[null,"^14","^22"]],"^S",55,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"~$explain-str",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",275,"^R",7,"^S",275,"^T",18,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"^=","~$cljs.spec.alpha/explain-str","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",275,"^13","~$string","^S",275,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"~$*compile-asserts*",["^ ","^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1474,"^R",3,"^S",1474,"^T",20,"^1K",true,"^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"^=","~$cljs.spec.alpha/*compile-asserts*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",20,"^R",1,"^1K",true,"^Q",1467,"^S",1474,"^1M","^37","^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"~$with-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",211,"^R",7,"^S",211,"^T",15,"^U",["^V",["^W",["^V",[["^X","~$gen-fn"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^=","~$cljs.spec.alpha/with-gen","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["^X","^:9"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",211,"^13",["^6",["^2Y","^14"]],"^S",211,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^:9"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^6S",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",40,"^R",4,"^S",40,"^T",12,"^5:","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]]],"^5:","^1:","^=","~$cljs.spec.alpha/conform*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",40,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y",null],"~$check-asserts?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1482,"^R",16,"^S",1482,"^T",30,"^1M","^37","^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"^=","~$cljs.spec.alpha/check-asserts?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",30,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1482,"^13","^37","^S",1482,"^15",0,"^1M","^37","^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"~$noret?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1052,"^R",8,"^S",1052,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["^4E","~$pret"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/noret?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["^4E","^:?"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1052,"^13",["^6",["^37","^14","^22"]],"^S",1052,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^4E","^:?"]]]]]],"~$rep-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1006,"^R",19,"^S",1006,"^T",27,"^1E",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"^=","~$cljs.spec.alpha/rep-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1006,"^13",["^6",["^2Y","^14","^22"]],"^S",1006,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"~$->t_cljs$spec$alpha33665",["^ ","^N",null,"^O",["^ ","^18",true,"^19",["^6",["^1:","^1;","^1<","^1="]],"^1>",["^6",["^1;","^1="]],"^1?","^1@","^U",["^V",["^W",["^V",[["^M","^1F","^1G","^7K","^99","~$meta33666"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33665.","^P",null],"^19",["^6",["^1:","^1;","^1<","^1="]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33665","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^[",["^V",[["^M","^1F","^1G","^7K","^99","^:D"]]],"^10",null,"^11",["^V",[null,null]],"^18",true,"^R",6,"^12",false,"^1?","^1@","^Q",520,"^13","^2F","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^1F","^1G","^7K","^99","^:D"]]]]],"^1>",["^6",["^1;","^1="]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33665."],"~$op-describe",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1143,"^R",8,"^S",1143,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/op-describe","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1143,"^13",["^6",[null,"^2Y","^14","^22"]],"^S",1143,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$describe",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",206,"^R",7,"^S",206,"^T",15,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"^=","~$cljs.spec.alpha/describe","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",15,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",206,"^13",["^6",[null,"^14","^2J"]],"^S",206,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"~$explain-1",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",387,"^R",8,"^S",387,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["^M","^1F","^24","^25","^26","~$v"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/explain-1","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["^M","^1F","^24","^25","^26","~$v"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",387,"^13",["^6",["^29","^14"]],"^S",387,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^1F","^24","^25","^26","~$v"]]]]]],"~$explain-out",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",264,"^R",7,"^S",264,"^T",18,"^U",["^V",["^W",["^V",[["^20"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"^=","~$cljs.spec.alpha/explain-out","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^20"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",264,"^13","^14","^S",264,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^20"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"~$re-gen",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1214,"^R",8,"^S",1214,"^T",14,"^1R",true,"^U",["^V",["^W",["^V",[["~$p","^6W","^24","^56","~$f"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/re-gen","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",14,"^[",["^V",[["~$p","^6W","^24","^56","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1214,"^13",["^6",["^14","^22"]],"^S",1214,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^6W","^24","^56","~$f"]]]]]],"~$filter-alt",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1020,"^R",8,"^S",1020,"^T",18,"^1R",true,"^U",["^V",["^W",["^V",[["^2W","^2V","^1V","~$f"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/filter-alt","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",18,"^[",["^V",[["^2W","^2V","^1V","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1020,"^13","^29","^S",1020,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2W","^2V","^1V","~$f"]]]]]],"~$and-preds",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",726,"^R",8,"^S",726,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["~$x","^1W","^1V"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/and-preds","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["~$x","^1W","^1V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",726,"^13",["^6",[null,"^2B"]],"^S",726,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^1W","^1V"]]]]]],"~$call-valid?",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1318,"^R",8,"^S",1318,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$f","^2Q","^9["]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/call-valid?","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$f","^2Q","^9["]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1318,"^13",["^6",["^37","^22"]],"^S",1318,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^2Q","^9["]]]]]],"~$op-unform",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1089,"^R",8,"^S",1089,"^T",17,"^1R",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/op-unform","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",17,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1089,"^13",["^6",["^29","^14"]],"^S",1089,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$rep*",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",999,"^R",8,"^S",999,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["^4E","^4F","^30","~$splice","^M"]]]]]],"^1R",true,"^=","~$cljs.spec.alpha/rep*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^4E","^4F","^30","^:Y","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",999,"^13",["^6",["^2Y","^14","^22"]],"^S",999,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^4E","^4F","^30","^:Y","^M"]]]]]],"^2?",["^ ","^N",null,"^O",["^ ","^5:","^1<","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^34",["^ ","^12",false,"^35",2,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^R",4,"^Q",132,"^S",132,"^U",["^V",["^W",["^V",[["~$_"],["~$_","^M"]]]]],"^Y",null],"^5:","^1<","^=","~$cljs.spec.alpha/specize*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^34",["^ ","^12",false,"^35",2,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$_"],["~$_","^M"]]],"^10",null,"^35",2,"^11",["^V",[null,null]],"^R",1,"^12",false,"^2>",[["^ ","^35",1,"^12",false,"^1M","^14"],["^ ","^35",2,"^12",false,"^1M","^14"]],"^Q",131,"^S",132,"^15",2,"^16",true,"^U",["^V",[["~$_"],["~$_","^M"]]],"^Y",null],"~$maybe-impl",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1048,"^R",19,"^S",1048,"^T",29,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"^=","~$cljs.spec.alpha/maybe-impl","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",29,"^[",["^V",[["~$p","^M"]]],"^10",null,"^1E",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1048,"^13",["^6",["^2Y","^14"]],"^S",1048,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"~$pcat",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",992,"^R",8,"^S",992,"^T",12,"^1R",true,"^U",["^V",["^W",["^V",[["~$&","^2W"]]]]],"^34",["^ ","^12",true,"^35",0,"^15",0,"^[",[["^V",["^2W"]]],"^U",["^V",[["~$&","^2W"]]],"^11",["^V",[null]]]],"^1R",true,"^=","~$cljs.spec.alpha/pcat","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^34",["^ ","^12",true,"^35",0,"^15",0,"^[",[["^V",["^2W"]]],"^U",["^V",[["~$&","^2W"]]],"^11",["^V",[null]]],"^[",[["^V",["^2W"]]],"^10",null,"^35",0,"^11",["^V",[null]],"^R",1,"^12",true,"^2>",[["^ ","^35",0,"^12",true,"^1M",["^6",["^14","^1T","^22"]]]],"^Q",992,"^13","^14","^S",992,"^15",0,"^16",true,"^U",["^V",[["~$&","^2W"]]]],"^6U",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",42,"^R",4,"^S",42,"^T",12,"^5:","^1:","^Y",null,"^U",["^V",["^W",["^V",[["^X","^24","^25","^26","~$x"]]]]]],"^5:","^1:","^=","~$cljs.spec.alpha/explain*","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",12,"^[",["^V",[["^X","^24","^25","^26","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",42,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^24","^25","^26","~$x"]]]]],"^Y",null],"~$validate-fn",["^ ","^N",null,"^O",["^ ","^P","c:\\dev\\git\\tjsamples\\clojurescript\\quil\\clock\\resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^Q",1329,"^R",8,"^S",1329,"^T",19,"^1R",true,"^U",["^V",["^W",["^V",[["~$f","^2Q","~$iters"]]]]],"^Y","returns f if valid, else smallest"],"^1R",true,"^=","~$cljs.spec.alpha/validate-fn","^P","resources\\public\\js\\development\\cljs\\spec\\alpha.cljs","^T",19,"^[",["^V",[["~$f","^2Q","^;6"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1329,"^13",["^6",[null,"^14","^22"]],"^S",1329,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^2Q","^;6"]]]]],"^Y","returns f if valid, else smallest"]],"~:cljs.spec/registry-ref",[["~:cljs.spec.alpha/kvs->map",["^V",["~$cljs.spec.alpha/conformer",["^V",["~$fn*",["~$p1__33983#"],["^V",["~$cljs.core/zipmap",["^V",["~$cljs.core/map","~:cljs.spec.alpha/k","^;<"]],["^V",["^;>","~:cljs.spec.alpha/v","^;<"]]]]]],["^V",["^;;",["~$p1__33984#"],["^V",["^;>",["^V",["~$cljs.core/fn",[["~$k","~$v"]],["^ ","^;?","~$k","^;@","~$v"]]],"^;A"]]]]]]]],"~:require-macros",["^ ","~$c","^A","^A","^A","~$s","^>","^>","^>","^F","^G","^G","^G"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^M","^2[","^5W","~:args","~:cljs.spec.alpha/failure","~$cljs.spec.alpha/*","~:max-tries","~:path","~:req-un","~:opt-un","^7=","^99","~$cljs.spec.alpha/+","~:p2","^9Q","~:cljs.spec.alpha/unknown","~$cljs.core/sequential?","~:cljs.spec.alpha/value","~:gfn","~:cljs.spec.alpha/recursion-limit","~:cljs.spec.alpha/name","~:pred-exprs","^8W","~:keys-pred","~:gen-max","^5X","~:shrunk","~:fn","~$cljs.spec.alpha/alt","^2S","~$cljs.core/vector?","^3A","^9S","~$cljs.core/=","~:opt-keys","^3[","^5Y","^9=","~:cljs.spec.alpha/rep","~:pred","^3B","~:splice","^5Z","^1V","^5G","~:cljs.spec.alpha/accept","^3Z","~:else","^9M","~$cljs.core/count","~$cljs.spec.alpha/and","^6?","^5=","^5>","~$cljs.spec.alpha/cat","~:_","^8Y","~:maybe","~:via","~$cljs.spec.alpha/every","~:req-specs","~$cljs.spec.alpha/or","^1G","~:cljs.spec.alpha/gfn","^5[","^42","~$v","~:cljs.spec.alpha/spec","^5@","~:conform-keys","^5?","^9@","^7K","~$cljs.spec.alpha/fspec","^5I","~$fn","~:amp","^4;","^43","^4Y","~$cljs.spec.alpha/nilable","^5A","^;@","~$cljs.spec.alpha/tuple","^1F","^1A","~$cljs.core/map?","^8[","~:p1","^9>","^:D","^;=","~:cljs.spec.alpha/problems","^60","^44","~$%","^;>","^;9","~$method","^;A","~:distinct","^5B","^8","^8B","~$cljs.spec.alpha/keys","^3O","^61","^8A","~:reason","~$cljs.spec.alpha/merge","~:cljs.spec.alpha/invalid","^1W","^62","~:req","^63","^64","~$nil?","^;<","~:assertion-failed","^;;","~$cljs.core/<=","^76","~:cljs.spec.alpha/amp","~:id","^5K","^65","~:min-count","~:kind","~:smallest","~$cljs.core/set?","~:count","^7G","~$cljs.core/nil?","^3>","~:req-keys","^3?","~$k","^;?","^;B","~$cljs.core/list?","^66","^40","~:opt-specs","^1X","~:cljs.spec.alpha/args","^41","~$ifn?","~:pred-forms","^5C","^X","^:","~$distinct?","~:max-count","^67","^8Z","~:max-elements","^7H","^68","~$cljs.spec.alpha/multi-spec","~$cljs.core/coll?","^3@","~:num-elements","^2Q","^69","^3C","^5D","~$apply","^6:","^6;","^6<","^2R","~:min-elements","^5E","^6=","^90","~:cljs.spec.alpha/alt","~$cljs.core/or","^9P","~:cljs.spec.alpha/pred","^;","~:cljs.spec.alpha/nil","^9J","^73","^9?","^;:","~:in","^8X","^6>","~:accept","~$cljs.spec.alpha/&","~:opt","~:cljs.spec.alpha/pcat","^5F","~$cljs.spec.alpha/?"]],"~:order",["^4Y","^;T","^;O","^<O","^<C","~~:_","^=G","^;Z","^=C","^;B","^=?","^<[","^;P","^3O","^73","^;Y","^<X","^;X","^=<","^=4","^<B","^3Z","^3[","^40","^41","^42","^43","^44","^;9","^;:","^;;","^;<","^;=","^;>","^;?","^;@","^;A","~$k","~$v","^76","^1A","^=@","^<Q","^<E","^7=","^;G","^<R"]],"^Y",null]
["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/core-js-pure/internals/array-sort.js"],"~:js","shadow$provide.module$node_modules$core_js_pure$internals$array_sort=function(global,require,module,exports){var floor=Math.floor,mergeSort=function(array,comparefn){var length=array.length,middle=floor(length/2);if(8>length){length=array.length;middle=1;for(var element,j;middle<length;){j=middle;for(element=array[middle];j&&0<comparefn(array[j-1],element);)array[j]=array[--j];j!==middle++&&(array[j]=element)}comparefn=array}else{length=mergeSort(array.slice(0,middle),comparefn);array=mergeSort(array.slice(middle),\ncomparefn);middle=length.length;element=array.length;for(var rindex=j=0,result=[];j<middle||rindex<element;)j<middle&&rindex<element?result.push(0>=comparefn(length[j],array[rindex])?length[j++]:array[rindex++]):result.push(j<middle?length[j++]:array[rindex++]);comparefn=result}return comparefn};module.exports=mergeSort}","~:source","shadow$provide[\"module$node_modules$core_js_pure$internals$array_sort\"] = function(global,require,module,exports) {\n// TODO: use something more complex like timsort?\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(\n    mergeSort(array.slice(0, middle), comparefn),\n    mergeSort(array.slice(middle), comparefn),\n    comparefn\n  );\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n    if (j !== i++) array[j] = element;\n  } return array;\n};\n\nvar merge = function (left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n  var result = [];\n\n  while (lindex < llength || rindex < rlength) {\n    if (lindex < llength && rindex < rlength) {\n      result.push(comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]);\n    } else {\n      result.push(lindex < llength ? left[lindex++] : right[rindex++]);\n    }\n  } return result;\n};\n\nmodule.exports = mergeSort;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1633159627436,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$core_js_pure$internals$array_sort.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,qDAAf,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAElH,IAAIC,MAAQC,IAARD,CAAaA,KAAjB,CAEIE,UAAYA,QAAS,CAACC,KAAD,CAAQC,SAAR,CAAmB,CAC1C,IAAIC,OAASF,KAATE,CAAeA,MAAnB,CACIC,OAASN,KAAA,CAAMK,MAAN,CAAe,CAAf,CACN,IAAS,CAAT,CAAAA,MAAA,CAAA,CAQHA,MAAAA,CARgBF,KAQhBE,CAAeA,MACfE,OAAAA,CAAI,CAGR,KAL8C,IAG1CC,OAH0C,CAGjCC,CAEb,CAAOF,MAAP,CAAWF,MAAX,CAAA,CAAmB,CACjBI,CAAA,CAAIF,MAEJ,KADAC,OACA,CAfkBL,KAcR,CAAMI,MAAN,CACV,CAAOE,CAAP,EAA+C,CAA/C,CAfkBL,SAeN,CAfMD,KAeI,CAAMM,CAAN,CAAU,CAAV,CAAV,CAAwBD,OAAxB,CAAZ,CAAA,CAfkBL,KAgBhB,CAAMM,CAAN,CAAA,CAhBgBN,KAgBL,CAAM,EAAEM,CAAR,CAETA,EAAJ,GAAUF,MAAA,EAAV,GAlBkBJ,KAkBH,CAAMM,CAAN,CAAf,CAA0BD,OAA1B,CANiB,CAOjB,SAAA,CAnBkBL,KAAb,CAAA,IAAA,CAA+C,MAAA,CAAA,SAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA;AAAA,SAAA,CAuBlDO,OAAAA,CAAUC,MAAVD,CAAeL,MACfO,QAAAA,CAAUC,KAAVD,CAAgBP,MAKpB,KAHA,IAAIS,OADAC,CACAD,CADS,CACb,CACIE,OAAS,EAEb,CAAOD,CAAP,CAAgBL,MAAhB,EAA2BI,MAA3B,CAAoCF,OAApC,CAAA,CACMG,CAAJ,CAAaL,MAAb,EAAwBI,MAAxB,CAAiCF,OAAjC,CACEI,MAAA,CAAOC,IAAP,CAAsD,CAA1C,EA/BsCb,SA+BtC,CAAUO,MAAA,CAAKI,CAAL,CAAV,CAAwBF,KAAA,CAAMC,MAAN,CAAxB,CAAA,CAA8CH,MAAA,CAAKI,CAAA,EAAL,CAA9C,CAA+DF,KAAA,CAAMC,MAAA,EAAN,CAA3E,CADF,CAGEE,MAAA,CAAOC,IAAP,CAAYF,CAAA,CAASL,MAAT,CAAmBC,MAAA,CAAKI,CAAA,EAAL,CAAnB,CAAoCF,KAAA,CAAMC,MAAA,EAAN,CAAhD,CAEF,UAAA,CAAOE,MAnCF,CAAP,MAAO,UAHmC,CAyC5ClB,OAAA,CAAOC,OAAP,CAAiBG,SA7CiG;\",\n\"sources\":[\"node_modules/core-js-pure/internals/array-sort.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$core_js_pure$internals$array_sort\\\"] = function(global,require,module,exports) {\\n// TODO: use something more complex like timsort?\\nvar floor = Math.floor;\\n\\nvar mergeSort = function (array, comparefn) {\\n  var length = array.length;\\n  var middle = floor(length / 2);\\n  return length < 8 ? insertionSort(array, comparefn) : merge(\\n    mergeSort(array.slice(0, middle), comparefn),\\n    mergeSort(array.slice(middle), comparefn),\\n    comparefn\\n  );\\n};\\n\\nvar insertionSort = function (array, comparefn) {\\n  var length = array.length;\\n  var i = 1;\\n  var element, j;\\n\\n  while (i < length) {\\n    j = i;\\n    element = array[i];\\n    while (j && comparefn(array[j - 1], element) > 0) {\\n      array[j] = array[--j];\\n    }\\n    if (j !== i++) array[j] = element;\\n  } return array;\\n};\\n\\nvar merge = function (left, right, comparefn) {\\n  var llength = left.length;\\n  var rlength = right.length;\\n  var lindex = 0;\\n  var rindex = 0;\\n  var result = [];\\n\\n  while (lindex < llength || rindex < rlength) {\\n    if (lindex < llength && rindex < rlength) {\\n      result.push(comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]);\\n    } else {\\n      result.push(lindex < llength ? left[lindex++] : right[rindex++]);\\n    }\\n  } return result;\\n};\\n\\nmodule.exports = mergeSort;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"floor\",\"Math\",\"mergeSort\",\"array\",\"comparefn\",\"length\",\"middle\",\"i\",\"element\",\"j\",\"llength\",\"left\",\"rlength\",\"right\",\"rindex\",\"lindex\",\"result\",\"push\"]\n}\n"]
["^ ","~:output",["^ ","~:js","goog.provide('devtools.munging');\r\ndevtools.munging.dollar_replacement = \"~\\uFE69~\";\r\ndevtools.munging.max_fixed_arity_to_scan = (64);\r\ndevtools.munging.get_global_scope = (function devtools$munging$get_global_scope(){\r\nreturn devtools.context.get_root.call(null);\r\n});\r\ndevtools.munging.js_reserved_QMARK_ = (function devtools$munging$js_reserved_QMARK_(x){\r\nvar temp__5733__auto__ = (function (){var temp__5733__auto__ = (devtools.munging.get_global_scope.call(null)[\"cljs\"]);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar o66858 = temp__5733__auto__;\r\nvar temp__5733__auto____$1 = (o66858[\"core\"]);\r\nif(cljs.core.truth_(temp__5733__auto____$1)){\r\nvar o66859 = temp__5733__auto____$1;\r\nreturn (o66859[\"js_reserved_QMARK_\"]);\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n})();\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar js_reserved_fn = temp__5733__auto__;\r\nreturn (js_reserved_fn.cljs$core$IFn$_invoke$arity$1 ? js_reserved_fn.cljs$core$IFn$_invoke$arity$1(x) : js_reserved_fn.call(null,x));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ndevtools.munging.get_fn_source_safely = (function devtools$munging$get_fn_source_safely(f){\r\ntry{if(cljs.core.truth_(\"toString\" in f)){\r\nvar o__65789__auto__ = f;\r\nreturn (o__65789__auto__[\"toString\"]).call(o__65789__auto__);\r\n} else {\r\nreturn \"\";\r\n}\r\n}catch (e66863){var _ = e66863;\r\nreturn \"\";\r\n}});\r\ndevtools.munging.get_fn_fixed_arity = (function devtools$munging$get_fn_fixed_arity(f,n){\r\nreturn (f[[\"cljs$core$IFn$_invoke$arity$\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join('')]);\r\n});\r\ndevtools.munging.get_fn_variadic_arity = (function devtools$munging$get_fn_variadic_arity(f){\r\nreturn (f[\"cljs$core$IFn$_invoke$arity$variadic\"]);\r\n});\r\ndevtools.munging.get_fn_max_fixed_arity = (function devtools$munging$get_fn_max_fixed_arity(f){\r\nreturn (f[\"cljs$lang$maxFixedArity\"]);\r\n});\r\ndevtools.munging.get_type_name = (function devtools$munging$get_type_name(t){\r\nvar sb = (new goog.string.StringBuffer());\r\nvar writer = (new cljs.core.StringBufferWriter(sb));\r\ntry{var o__65789__auto___67219 = t;\r\n(o__65789__auto___67219[\"cljs$lang$ctorPrWriter\"]).call(o__65789__auto___67219,t,writer);\r\n}catch (e66881){var __67220 = e66881;\r\n}\r\nwriter.cljs$core$IWriter$_flush$arity$1(null);\r\n\r\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);\r\n});\r\n/**\r\n * Given a character with a single digit converts it into a subscript character.\r\n *   Zero character maps to unicode 'SUBSCRIPT ZERO' (U+2080).\r\n */\r\ndevtools.munging.char_to_subscript = (function devtools$munging$char_to_subscript(char$){\r\nif(typeof char$ === 'string'){\r\n} else {\r\nthrow (new Error(\"Assert failed: (string? char)\"));\r\n}\r\n\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(char$),(1))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (= (count char) 1)\"));\r\n}\r\n\r\nvar char_code = (function (){var o__65789__auto__ = (new String(char$));\r\nreturn (o__65789__auto__[\"charCodeAt\"]).call(o__65789__auto__,(0));\r\n})();\r\nvar num_code = (char_code - (48));\r\nvar subscript_code = ((8320) + num_code);\r\nvar o__65789__auto__ = String;\r\nreturn (o__65789__auto__[\"fromCharCode\"]).call(o__65789__auto__,subscript_code);\r\n});\r\n/**\r\n * Given a subscript number converts it into a string representation consisting of unicode subscript characters (digits).\r\n */\r\ndevtools.munging.make_subscript = (function devtools$munging$make_subscript(subscript){\r\nif(typeof subscript === 'number'){\r\n} else {\r\nthrow (new Error(\"Assert failed: (number? subscript)\"));\r\n}\r\n\r\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(devtools.munging.char_to_subscript,cljs.core.str.cljs$core$IFn$_invoke$arity$1(subscript)));\r\n});\r\n/**\r\n * Given a character with a single digit converts it into a superscript character.\r\n *   Zero character maps to unicode 'SUPERSCRIPT ZERO' (U+2070).\r\n */\r\ndevtools.munging.char_to_superscript = (function devtools$munging$char_to_superscript(char$){\r\nif(typeof char$ === 'string'){\r\n} else {\r\nthrow (new Error(\"Assert failed: (string? char)\"));\r\n}\r\n\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(char$),(1))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (= (count char) 1)\"));\r\n}\r\n\r\nvar char_code = (function (){var o__65789__auto__ = (new String(char$));\r\nreturn (o__65789__auto__[\"charCodeAt\"]).call(o__65789__auto__,(0));\r\n})();\r\nvar num_code = (char_code - (48));\r\nvar superscript_code = (function (){var G__66885 = num_code;\r\nswitch (G__66885) {\r\ncase (1):\r\nreturn (185);\r\n\r\nbreak;\r\ncase (2):\r\nreturn (178);\r\n\r\nbreak;\r\ncase (3):\r\nreturn (179);\r\n\r\nbreak;\r\ndefault:\r\nreturn ((8304) + num_code);\r\n\r\n}\r\n})();\r\nvar o__65789__auto__ = String;\r\nreturn (o__65789__auto__[\"fromCharCode\"]).call(o__65789__auto__,superscript_code);\r\n});\r\n/**\r\n * Given a superscript number converts it into a string representation consisting of unicode superscript characters (digits).\r\n */\r\ndevtools.munging.make_superscript = (function devtools$munging$make_superscript(superscript){\r\nif(typeof superscript === 'number'){\r\n} else {\r\nthrow (new Error(\"Assert failed: (number? superscript)\"));\r\n}\r\n\r\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(devtools.munging.char_to_superscript,cljs.core.str.cljs$core$IFn$_invoke$arity$1(superscript)));\r\n});\r\n/**\r\n * Given a Javascript name answers if the name was likely generated by ClojureScript.\r\n *   We use a simple heuristic here:\r\n *  The name must contain at least two separate dollars because we assume two-segment namespaces.\r\n */\r\ndevtools.munging.cljs_fn_name_QMARK_ = (function devtools$munging$cljs_fn_name_QMARK_(munged_name){\r\nif(typeof munged_name === 'string'){\r\nreturn (!((cljs.core.re_matches(/^[^$]*\\$[^$]+\\$.*$/,munged_name) == null)));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Given a function source code parses out [name args]. Note that both strings are still munged.\r\n *   Suitable for further processing.\r\n * \r\n *   For example for input below the function will return [\"devtools_sample$core$hello\" \"name, unused_param\"]:\r\n * \r\n *   function devtools_sample$core$hello(name, unused_param){\r\n *  return [cljs.core.str(\"hello, \"),cljs.core.str(name),cljs.core.str(\"!\")].join('');\r\n *   }\r\n *   \r\n */\r\ndevtools.munging.parse_fn_source = (function devtools$munging$parse_fn_source(fn_source){\r\nvar temp__5733__auto__ = cljs.core.second(cljs.core.re_find(/function\\s(.*?)\\{/,fn_source));\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar meat = temp__5733__auto__;\r\nvar temp__5733__auto____$1 = cljs.core.re_find(/(.*?)\\((.*)\\)/,meat);\r\nif(cljs.core.truth_(temp__5733__auto____$1)){\r\nvar match = temp__5733__auto____$1;\r\nreturn cljs.core.rest(match);\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ndevtools.munging.trivial_fn_source_QMARK_ = (function devtools$munging$trivial_fn_source_QMARK_(fn_source){\r\nif(typeof fn_source === 'string'){\r\n} else {\r\nthrow (new Error(\"Assert failed: (string? fn-source)\"));\r\n}\r\n\r\nreturn (((!((cljs.core.re_matches(/function\\s*\\(\\s*\\)\\s*\\{\\s*\\}\\s*/,fn_source) == null)))) || ((!((cljs.core.re_matches(/function.*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*/,fn_source) == null)))) || ((!((cljs.core.re_matches(/function anonymous\\(\\s*\\)\\s*\\{\\s*\\}/,fn_source) == null)))));\r\n});\r\n/**\r\n * Given a Javascript function object returns true if the function looks like a ClojureScript function.\r\n * \r\n *   Uses various heuristics:\r\n *  1. must be fn? (is javascript function or satisfies Fn and IFn protocols)\r\n *  2. and name must be cljs-fn-name? (name can come from f.name or parsed out of function source)\r\n *  3. or if anonymous function, must be non-trivial\r\n */\r\ndevtools.munging.cljs_fn_QMARK_ = (function devtools$munging$cljs_fn_QMARK_(f){\r\nif(cljs.core.truth_((function (){try{return cljs.core.fn_QMARK_(f);\r\n}catch (e66905){var _e__65811__auto__ = e66905;\r\nreturn false;\r\n}})())){\r\nvar name = (f[cljs.core.name]);\r\nif((!(cljs.core.empty_QMARK_(name)))){\r\nreturn devtools.munging.cljs_fn_name_QMARK_(name);\r\n} else {\r\nvar fn_source = devtools.munging.get_fn_source_safely(f);\r\nvar vec__66910 = devtools.munging.parse_fn_source(fn_source);\r\nvar name__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66910,(0),null);\r\nif((!(cljs.core.empty_QMARK_(name__$1)))){\r\nreturn devtools.munging.cljs_fn_name_QMARK_(name__$1);\r\n} else {\r\nreturn (!(devtools.munging.trivial_fn_source_QMARK_(fn_source)));\r\n}\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Standard cljs.core/demunge is too aggressive in replacing dollars.\r\n *   This wrapper function works around it by leaving dollars intact.\r\n */\r\ndevtools.munging.dollar_preserving_demunge = (function devtools$munging$dollar_preserving_demunge(munged_name){\r\nreturn clojure.string.replace(cljs.core.demunge(clojure.string.replace(munged_name,\"$\",devtools.munging.dollar_replacement)),devtools.munging.dollar_replacement,\"$\");\r\n});\r\ndevtools.munging.revert_reserved = (function devtools$munging$revert_reserved(s){\r\nvar or__4126__auto__ = (function (){var temp__5733__auto__ = cljs.core.re_matches(/(.*)\\$/,s);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar m = temp__5733__auto__;\r\nif(cljs.core.truth_(devtools.munging.js_reserved_QMARK_(cljs.core.second(m)))){\r\nreturn cljs.core.second(m);\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n})();\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn s;\r\n}\r\n});\r\ndevtools.munging.reserved_aware_demunge = (function devtools$munging$reserved_aware_demunge(munged_name){\r\nreturn devtools.munging.revert_reserved(devtools.munging.dollar_preserving_demunge(munged_name));\r\n});\r\ndevtools.munging.proper_demunge = (function devtools$munging$proper_demunge(munged_name){\r\nreturn devtools.munging.reserved_aware_demunge(munged_name);\r\n});\r\ndevtools.munging.proper_arg_demunge = (function devtools$munging$proper_arg_demunge(munged_arg_name){\r\nreturn clojure.string.replace(devtools.munging.proper_demunge(munged_arg_name),/^-(.*)$/,\"_$1\");\r\n});\r\ndevtools.munging.proper_ns_demunge = (function devtools$munging$proper_ns_demunge(munged_ns_name){\r\nreturn clojure.string.replace(devtools.munging.proper_demunge(munged_ns_name),\"$\",\".\");\r\n});\r\ndevtools.munging.ns_exists_QMARK_ = (function devtools$munging$ns_exists_QMARK_(ns_module_name){\r\nif(typeof ns_module_name === 'string'){\r\n} else {\r\nthrow (new Error(\"Assert failed: (string? ns-module-name)\"));\r\n}\r\n\r\nvar temp__5737__auto__ = goog.object.getValueByKeys(devtools.munging.get_global_scope.call(null),ns_module_name.split(\".\"));\r\nif((temp__5737__auto__ == null)){\r\nreturn null;\r\n} else {\r\nvar ns_obj = temp__5737__auto__;\r\nreturn cljs.core.object_QMARK_(ns_obj);\r\n}\r\n});\r\n/**\r\n * Given a name broken into namespace parts returns [detected-ns remaining-parts],\r\n *   where detected-ns is a string representing longest detected existing namespace and\r\n *   remaining-parts is a vector of remaining input parts not included in the detected-ns concatenation.\r\n * \r\n *   For given input [\"cljs\" \"core\" \"first\"] returns [\"cljs.core\" [\"first\"]] (assuming cljs.core exists)\r\n */\r\ndevtools.munging.detect_namespace_prefix = (function devtools$munging$detect_namespace_prefix(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___67342 = arguments.length;\r\nvar i__4737__auto___67343 = (0);\r\nwhile(true){\r\nif((i__4737__auto___67343 < len__4736__auto___67342)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___67343]));\r\n\r\nvar G__67344 = (i__4737__auto___67343 + (1));\r\ni__4737__auto___67343 = G__67344;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\r\nreturn devtools.munging.detect_namespace_prefix.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\r\n});\r\n\r\n(devtools.munging.detect_namespace_prefix.cljs$core$IFn$_invoke$arity$variadic = (function (tokens,p__66977){\r\nvar vec__66979 = p__66977;\r\nvar ns_detector = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66979,(0),null);\r\nvar effective_detector = (function (){var or__4126__auto__ = ns_detector;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn devtools.munging.ns_exists_QMARK_;\r\n}\r\n})();\r\nvar name_tokens = cljs.core.PersistentVector.EMPTY;\r\nvar remaining_tokens = tokens;\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(remaining_tokens)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",name_tokens], null);\r\n} else {\r\nvar ns_name = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\".\",remaining_tokens);\r\nif(cljs.core.truth_((effective_detector.cljs$core$IFn$_invoke$arity$1 ? effective_detector.cljs$core$IFn$_invoke$arity$1(ns_name) : effective_detector.call(null,ns_name)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns_name,name_tokens], null);\r\n} else {\r\nvar G__67354 = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.last(remaining_tokens)], null),name_tokens);\r\nvar G__67355 = cljs.core.butlast(remaining_tokens);\r\nname_tokens = G__67354;\r\nremaining_tokens = G__67355;\r\ncontinue;\r\n}\r\n}\r\nbreak;\r\n}\r\n}));\r\n\r\n(devtools.munging.detect_namespace_prefix.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(devtools.munging.detect_namespace_prefix.cljs$lang$applyTo = (function (seq66966){\r\nvar G__66967 = cljs.core.first(seq66966);\r\nvar seq66966__$1 = cljs.core.next(seq66966);\r\nvar self__4723__auto__ = this;\r\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__66967,seq66966__$1);\r\n}));\r\n\r\ndevtools.munging.normalize_arity = (function devtools$munging$normalize_arity(arity_tokens){\r\nif((!(cljs.core.empty_QMARK_(arity_tokens)))){\r\nvar arity = cljs.core.first(arity_tokens);\r\nvar G__66993 = arity;\r\nswitch (G__66993) {\r\ncase \"variadic\":\r\nreturn arity;\r\n\r\nbreak;\r\ndefault:\r\nreturn parseInt(arity,(10));\r\n\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ndevtools.munging.strip_arity = (function devtools$munging$strip_arity(tokens){\r\nvar vec__66999 = cljs.core.split_with((function (p1__66994_SHARP_){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(p1__66994_SHARP_,\"arity\");\r\n}),tokens);\r\nvar prefix_tokens = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66999,(0),null);\r\nvar arity_tokens = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__66999,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prefix_tokens,devtools.munging.normalize_arity(cljs.core.rest(arity_tokens))], null);\r\n});\r\ndevtools.munging.parse_protocol = (function devtools$munging$parse_protocol(tokens,detector){\r\nvar remaining_tokens = tokens;\r\nvar name_tokens = cljs.core.PersistentVector.EMPTY;\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(remaining_tokens)){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name_tokens], null);\r\n} else {\r\nvar vec__67009 = devtools.munging.detect_namespace_prefix.cljs$core$IFn$_invoke$arity$variadic(remaining_tokens,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([detector], 0));\r\nvar protocol_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67009,(0),null);\r\nvar name_and_method_tokens = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67009,(1),null);\r\nif(cljs.core.empty_QMARK_(protocol_ns)){\r\nvar G__67361 = cljs.core.rest(remaining_tokens);\r\nvar G__67362 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(name_tokens,cljs.core.first(remaining_tokens));\r\nremaining_tokens = G__67361;\r\nname_tokens = G__67362;\r\ncontinue;\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [name_tokens,protocol_ns,cljs.core.first(name_and_method_tokens),cljs.core.rest(name_and_method_tokens)], null);\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Given a munged-name from Javascript lands attempts to break it into:\r\n *   [fn-ns fn-name protocol-ns protocol-name protocol-method arity].\r\n * \r\n *   Protocol and arity elements are optional. Function elements are always present or \"\".\r\n * \r\n *   examples for input:\r\n *  cljs$core$rest => ['cljs.core', 'rest']\r\n *  cljs.core.reduce$cljs$core$IFn$_invoke$arity$3 => ['cljs.core' 'reduce' 'cljs.core' 'IFn' '_invoke' 3]\r\n */\r\ndevtools.munging.break_munged_name = (function devtools$munging$break_munged_name(var_args){\r\nvar G__67016 = arguments.length;\r\nswitch (G__67016) {\r\ncase 1:\r\nreturn devtools.munging.break_munged_name.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn devtools.munging.break_munged_name.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(devtools.munging.break_munged_name.cljs$core$IFn$_invoke$arity$1 = (function (munged_name){\r\nreturn devtools.munging.break_munged_name.cljs$core$IFn$_invoke$arity$2(munged_name,null);\r\n}));\r\n\r\n(devtools.munging.break_munged_name.cljs$core$IFn$_invoke$arity$2 = (function (munged_name,ns_detector){\r\nif(cljs.core.empty_QMARK_(munged_name)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",\"\"], null);\r\n} else {\r\nvar effective_detector = (function (){var or__4126__auto__ = ns_detector;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn devtools.munging.ns_exists_QMARK_;\r\n}\r\n})();\r\nvar tokens = cljs.core.vec(munged_name.split(/[$.]/));\r\nvar vec__67019 = devtools.munging.strip_arity(tokens);\r\nvar tokens__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67019,(0),null);\r\nvar arity = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67019,(1),null);\r\nvar vec__67022 = devtools.munging.detect_namespace_prefix.cljs$core$IFn$_invoke$arity$variadic(tokens__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([effective_detector], 0));\r\nvar fn_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67022,(0),null);\r\nvar tokens__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67022,(1),null);\r\nvar vec__67025 = devtools.munging.parse_protocol(tokens__$2,effective_detector);\r\nvar fn_name_tokens = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67025,(0),null);\r\nvar protocol_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67025,(1),null);\r\nvar protocol_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67025,(2),null);\r\nvar protocol_method_tokens = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67025,(3),null);\r\nvar fn_name = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"$\",fn_name_tokens);\r\nvar protocol_method = (cljs.core.truth_(protocol_method_tokens)?clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"$\",protocol_method_tokens):null);\r\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [fn_ns,fn_name,protocol_ns,protocol_name,protocol_method,arity], null);\r\n}\r\n}));\r\n\r\n(devtools.munging.break_munged_name.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Given a munged-name from Javascript lands attempts to break it into a namespace part and remaining short name.\r\n *   Then applies appropriate demunging on them and returns ClojureScript versions of the names.\r\n */\r\ndevtools.munging.break_and_demunge_name = (function devtools$munging$break_and_demunge_name(var_args){\r\nvar G__67033 = arguments.length;\r\nswitch (G__67033) {\r\ncase 1:\r\nreturn devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$1 = (function (munged_name){\r\nreturn devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$2(munged_name,null);\r\n}));\r\n\r\n(devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$2 = (function (munged_name,ns_detector){\r\nvar result = devtools.munging.break_munged_name.cljs$core$IFn$_invoke$arity$2(munged_name,ns_detector);\r\nvar vec__67034 = result;\r\nvar munged_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67034,(0),null);\r\nvar munged_name__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67034,(1),null);\r\nvar munged_protocol_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67034,(2),null);\r\nvar munged_protocol_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67034,(3),null);\r\nvar munged_protocol_method = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67034,(4),null);\r\nvar arity = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67034,(5),null);\r\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [devtools.munging.proper_ns_demunge(munged_ns),devtools.munging.proper_demunge(munged_name__$1),(cljs.core.truth_(munged_protocol_ns)?devtools.munging.proper_ns_demunge(munged_protocol_ns):null),(cljs.core.truth_(munged_protocol_name)?devtools.munging.proper_demunge(munged_protocol_name):null),(cljs.core.truth_(munged_protocol_method)?devtools.munging.proper_demunge(munged_protocol_method):null),arity], null);\r\n}));\r\n\r\n(devtools.munging.break_and_demunge_name.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Given function source code tries to retrieve [ns name & args] on best effort basis, where\r\n *   ns is demunged namespace part of the function name (or \"\" if namespace cannot be detected)\r\n *   name is demunged short name (or \"\" if function is anonymous or name cannot be retrieved)\r\n *   args is optional number of demunged argument names.\r\n * \r\n *   Please note that this function always returns a vector with something. In worst cases [\"\" \"\"].\r\n *   \r\n */\r\ndevtools.munging.parse_fn_source_info = (function devtools$munging$parse_fn_source_info(fn_source){\r\nvar temp__5733__auto__ = devtools.munging.parse_fn_source(fn_source);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar vec__67037 = temp__5733__auto__;\r\nvar munged_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67037,(0),null);\r\nvar args = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67037,(1),null);\r\nvar vec__67040 = devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$1(munged_name);\r\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67040,(0),null);\r\nvar name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67040,(1),null);\r\nvar demunged_args = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(devtools.munging.proper_arg_demunge,clojure.string.trim),clojure.string.split.cljs$core$IFn$_invoke$arity$2(args,/,/));\r\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns,name], null),demunged_args);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",\"\"], null);\r\n}\r\n});\r\n/**\r\n * Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-source-info (on best effort basis).\r\n */\r\ndevtools.munging.parse_fn_info = (function devtools$munging$parse_fn_info(f){\r\nvar fn_source = devtools.munging.get_fn_source_safely(f);\r\nreturn devtools.munging.parse_fn_source_info(fn_source);\r\n});\r\n/**\r\n * Given a Javascript function object tries to retrieve [ns name & args] as in parse-fn-info (on best effort basis).\r\n * \r\n *   The difference from parse-fn-info is that this function prefers to read args from arities if available.\r\n *   It recurse arbitrary deep following IFn protocol leads.\r\n * \r\n *   If we hit multi-arity situation in leaf, we don't attempt to list arguments and return ::multi-arity placeholder instead.\r\n * \r\n *   The reason for reading arities is that it gives more accurate parameter names in some cases.\r\n *   We observed that variadic functions don't always contain original parameter names, but individual IFn arity functions do.\r\n */\r\ndevtools.munging.parse_fn_info_deep = (function devtools$munging$parse_fn_info_deep(f){\r\nvar fn_info = devtools.munging.parse_fn_info(f);\r\nvar arities = (devtools.munging.collect_fn_arities.cljs$core$IFn$_invoke$arity$1 ? devtools.munging.collect_fn_arities.cljs$core$IFn$_invoke$arity$1(f) : devtools.munging.collect_fn_arities.call(null,f));\r\nif((!((arities == null)))){\r\nif((cljs.core.count(arities) > (1))){\r\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.take.cljs$core$IFn$_invoke$arity$2((2),fn_info),new cljs.core.Keyword(\"devtools.munging\",\"multi-arity\",\"devtools.munging/multi-arity\",-2011705837));\r\n} else {\r\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.take.cljs$core$IFn$_invoke$arity$2((2),fn_info),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),(function (){var G__67047 = cljs.core.second(cljs.core.first(arities));\r\nreturn (devtools.munging.parse_fn_info_deep.cljs$core$IFn$_invoke$arity$1 ? devtools.munging.parse_fn_info_deep.cljs$core$IFn$_invoke$arity$1(G__67047) : devtools.munging.parse_fn_info_deep.call(null,G__67047));\r\n})()));\r\n}\r\n} else {\r\nreturn fn_info;\r\n}\r\n});\r\n/**\r\n * Given a demunged ClojureScript parameter name. Tries to detect human readable part and returns the index where it ends.\r\n *   Returns nil if no prefix can be detected.\r\n * \r\n *   The idea is to convert macro-generated parameters and other generated names to more friendly names.\r\n *   We observed that param names generated by gensym have prefix followed by big numbers.\r\n *   Other generated names contain two dashes after prefix (originally probably using underscores).\r\n */\r\ndevtools.munging.find_index_of_human_prefix = (function devtools$munging$find_index_of_human_prefix(name){\r\nvar sep_start = name.indexOf(\"--\");\r\nvar num_prefix = cljs.core.count(cljs.core.second(cljs.core.re_find(/(.*?)\\d{2,}/,name)));\r\nvar finds = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.pos_QMARK_,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sep_start,num_prefix], null));\r\nif((!(cljs.core.empty_QMARK_(finds)))){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.min,finds);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Given a name and intermediate state. Convert name to a human readable version by keeping human readable prefix with\r\n *   optional subscript postfix and store it in ::result. Subscript number is picked based on state. State keeps track of\r\n *   previously assigned subscripts. Returns a new state.\r\n */\r\ndevtools.munging.humanize_name = (function devtools$munging$humanize_name(state,name){\r\nvar index = devtools.munging.find_index_of_human_prefix(name);\r\nvar prefix = (((index > (0)))?name.substring((0),index):name);\r\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(state,prefix);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar subscript = temp__5733__auto__;\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.Keyword(\"devtools.munging\",\"result\",\"devtools.munging/result\",1642759166),cljs.core.conj,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix),devtools.munging.make_subscript(subscript)].join('')),prefix,cljs.core.inc);\r\n} else {\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.Keyword(\"devtools.munging\",\"result\",\"devtools.munging/result\",1642759166),cljs.core.conj,prefix),prefix,(2));\r\n}\r\n});\r\n/**\r\n * Given a list of names, returns a list of human-readable versions of those names.\r\n *   It detects human-readable prefix using a simple heuristics. When names repeat it assigns simple subscripts starting with 2.\r\n *   Subscripts are assigned left-to-right.\r\n * \r\n *   Given [\"p--a\" \"p--b\" \"x\" \"p--c\"] returns [\"p\" \"p₂\" \"x\" \"p₃\"]\r\n */\r\ndevtools.munging.humanize_names = (function devtools$munging$humanize_names(names){\r\nreturn cljs.core.with_meta(new cljs.core.Keyword(\"devtools.munging\",\"result\",\"devtools.munging/result\",1642759166).cljs$core$IFn$_invoke$arity$1(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(devtools.munging.humanize_name,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"devtools.munging\",\"result\",\"devtools.munging/result\",1642759166),cljs.core.PersistentVector.EMPTY], null),names)),cljs.core.meta(names));\r\n});\r\ndevtools.munging.collect_fn_fixed_arities = (function devtools$munging$collect_fn_fixed_arities(f,max_arity){\r\nvar arity = (0);\r\nvar collection = cljs.core.PersistentArrayMap.EMPTY;\r\nwhile(true){\r\nif((arity > max_arity)){\r\nreturn collection;\r\n} else {\r\nvar G__67384 = (arity + (1));\r\nvar G__67385 = (function (){var temp__5733__auto__ = devtools.munging.get_fn_fixed_arity(f,arity);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar arity_fn = temp__5733__auto__;\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(collection,arity,arity_fn);\r\n} else {\r\nreturn collection;\r\n}\r\n})();\r\narity = G__67384;\r\ncollection = G__67385;\r\ncontinue;\r\n}\r\nbreak;\r\n}\r\n});\r\ndevtools.munging.collect_fn_variadic_arities = (function devtools$munging$collect_fn_variadic_arities(f){\r\nvar temp__5733__auto__ = devtools.munging.get_fn_variadic_arity(f);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar variadic_arity = temp__5733__auto__;\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908),variadic_arity], null);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ndevtools.munging.review_arity = (function devtools$munging$review_arity(p__67061){\r\nvar vec__67062 = p__67061;\r\nvar arity = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67062,(0),null);\r\nvar arity_fn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67062,(1),null);\r\nvar sub_arities = (devtools.munging.collect_fn_arities.cljs$core$IFn$_invoke$arity$1 ? devtools.munging.collect_fn_arities.cljs$core$IFn$_invoke$arity$1(arity_fn) : devtools.munging.collect_fn_arities.call(null,arity_fn));\r\nif(cljs.core.truth_(new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908).cljs$core$IFn$_invoke$arity$1(sub_arities))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908),arity_fn], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [arity,arity_fn], null);\r\n}\r\n});\r\n/**\r\n * Some arities can be marked as fixed arity but in fact point to a variadic-arity function. We want to detect this case\r\n *   and turn such improperly categorized arities to ::variadic.\r\n */\r\ndevtools.munging.review_arities = (function devtools$munging$review_arities(arities){\r\nif(cljs.core.truth_(new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908).cljs$core$IFn$_invoke$arity$1(arities))){\r\nreturn arities;\r\n} else {\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(devtools.munging.review_arity,arities));\r\n}\r\n});\r\n/**\r\n * Given a Javascript function object, tries to inspect known arity properties generated by ClojureScript compiler and\r\n *   collects all available arity functions into a map. Arities are keyed by arity count and variadic arity gets ::variadic key.\r\n */\r\ndevtools.munging.collect_fn_arities = (function devtools$munging$collect_fn_arities(f){\r\nvar max_fixed_arity = devtools.munging.get_fn_max_fixed_arity(f);\r\nvar fixed_arities = devtools.munging.collect_fn_fixed_arities(f,(function (){var or__4126__auto__ = max_fixed_arity;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn devtools.munging.max_fixed_arity_to_scan;\r\n}\r\n})());\r\nvar variadic_arities = devtools.munging.collect_fn_variadic_arities(f);\r\nvar arities = devtools.munging.review_arities(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([fixed_arities,variadic_arities], 0)));\r\nif((!(cljs.core.empty_QMARK_(arities)))){\r\nreturn arities;\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * ::variadic goes last, other keywords compare by name.\r\n */\r\ndevtools.munging.arity_keywords_comparator = (function devtools$munging$arity_keywords_comparator(x,y){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908),x)){\r\nreturn (1);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908),y)){\r\nreturn (-1);\r\n} else {\r\nreturn cljs.core.compare(cljs.core.name(x),cljs.core.name(y));\r\n\r\n}\r\n}\r\n});\r\n/**\r\n * numbers go first (ordered), then keywords (ordered by name), and then ::variadic sticks last\r\n */\r\ndevtools.munging.arities_key_comparator = (function devtools$munging$arities_key_comparator(x,y){\r\nvar kx_QMARK_ = (x instanceof cljs.core.Keyword);\r\nvar ky_QMARK_ = (y instanceof cljs.core.Keyword);\r\nif(((kx_QMARK_) && (ky_QMARK_))){\r\nreturn devtools.munging.arity_keywords_comparator(x,y);\r\n} else {\r\nif(kx_QMARK_){\r\nreturn (1);\r\n} else {\r\nif(ky_QMARK_){\r\nreturn (-1);\r\n} else {\r\nreturn cljs.core.compare(x,y);\r\n\r\n}\r\n}\r\n}\r\n});\r\ndevtools.munging.arities_to_args_lists_STAR_ = (function devtools$munging$arities_to_args_lists_STAR_(arities){\r\nvar sorted_keys = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(devtools.munging.arities_key_comparator,cljs.core.keys(arities));\r\nvar sorted_fns = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__67083_SHARP_){\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(arities,p1__67083_SHARP_);\r\n}),sorted_keys);\r\nvar sorted_infos = cljs.core.map.cljs$core$IFn$_invoke$arity$2(devtools.munging.parse_fn_info_deep,sorted_fns);\r\nvar sorted_args_lists = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__67084_SHARP_){\r\nreturn cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),p1__67084_SHARP_);\r\n}),sorted_infos);\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(sorted_keys),new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908))){\r\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.butlast(sorted_args_lists),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(cljs.core.last(sorted_args_lists),cljs.core.assoc,new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908),true)], null));\r\n} else {\r\nreturn sorted_args_lists;\r\n}\r\n});\r\n/**\r\n * Given a map of arity functions. Tries to parse individual functions and prepare an arguments list for each arity.\r\n *   Returned list of arguments list is sorted by arity count, variadic arity goes last if available.\r\n * \r\n *   The function also optionally humanizes argument names in each arguments list if requested.\r\n */\r\ndevtools.munging.arities_to_args_lists = (function devtools$munging$arities_to_args_lists(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___67412 = arguments.length;\r\nvar i__4737__auto___67413 = (0);\r\nwhile(true){\r\nif((i__4737__auto___67413 < len__4736__auto___67412)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___67413]));\r\n\r\nvar G__67414 = (i__4737__auto___67413 + (1));\r\ni__4737__auto___67413 = G__67414;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\r\nreturn devtools.munging.arities_to_args_lists.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\r\n});\r\n\r\n(devtools.munging.arities_to_args_lists.cljs$core$IFn$_invoke$arity$variadic = (function (arities,p__67087){\r\nvar vec__67088 = p__67087;\r\nvar humanize_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67088,(0),null);\r\nvar args_lists = devtools.munging.arities_to_args_lists_STAR_(arities);\r\nif(cljs.core.truth_(humanize_QMARK_)){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(devtools.munging.humanize_names,args_lists);\r\n} else {\r\nreturn args_lists;\r\n}\r\n}));\r\n\r\n(devtools.munging.arities_to_args_lists.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(devtools.munging.arities_to_args_lists.cljs$lang$applyTo = (function (seq67085){\r\nvar G__67086 = cljs.core.first(seq67085);\r\nvar seq67085__$1 = cljs.core.next(seq67085);\r\nvar self__4723__auto__ = this;\r\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__67086,seq67085__$1);\r\n}));\r\n\r\n/**\r\n * Converts a list of arguments lists into a list of strings suitable for UI presentation.\r\n */\r\ndevtools.munging.args_lists_to_strings = (function devtools$munging$args_lists_to_strings(args_lists,spacer_symbol,multi_arity_symbol,rest_symbol){\r\nvar string_mapper = (function (arg){\r\nvar G__67092 = arg;\r\nvar G__67092__$1 = (((G__67092 instanceof cljs.core.Keyword))?G__67092.fqn:null);\r\nswitch (G__67092__$1) {\r\ncase \"devtools.munging/multi-arity\":\r\nreturn multi_arity_symbol;\r\n\r\nbreak;\r\ndefault:\r\nreturn arg;\r\n\r\n}\r\n});\r\nvar printer = (function (args_list){\r\nvar variadic_QMARK_ = new cljs.core.Keyword(\"devtools.munging\",\"variadic\",\"devtools.munging/variadic\",1596047908).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(args_list));\r\nvar args_strings = cljs.core.map.cljs$core$IFn$_invoke$arity$2(string_mapper,args_list);\r\nreturn [clojure.string.join.cljs$core$IFn$_invoke$arity$2(spacer_symbol,cljs.core.butlast(args_strings)),cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(variadic_QMARK_)?rest_symbol:spacer_symbol)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(args_strings))].join('');\r\n});\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.string.trim,cljs.core.map.cljs$core$IFn$_invoke$arity$2(printer,args_lists));\r\n});\r\ndevtools.munging.extract_arities = (function devtools$munging$extract_arities(f,humanize_QMARK_,spacer_symbol,multi_arity_symbol,rest_symbol){\r\nreturn devtools.munging.args_lists_to_strings(devtools.munging.arities_to_args_lists.cljs$core$IFn$_invoke$arity$variadic((function (){var or__4126__auto__ = devtools.munging.collect_fn_arities(f);\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"naked\",\"naked\",373474222),f], null);\r\n}\r\n})(),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([humanize_QMARK_], 0)),spacer_symbol,multi_arity_symbol,rest_symbol);\r\n});\r\ndevtools.munging.common_protocol_QMARK_ = (function devtools$munging$common_protocol_QMARK_(protocol_ns,protocol_name){\r\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(protocol_ns,\"cljs.core\")) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(protocol_name,\"IFn\")));\r\n});\r\ndevtools.munging.present_fn_part = (function devtools$munging$present_fn_part(fn_ns,fn_name,include_ns_QMARK_){\r\nreturn [(cljs.core.truth_((function (){var and__4115__auto__ = include_ns_QMARK_;\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn (!(cljs.core.empty_QMARK_(fn_ns)));\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n})())?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(fn_ns),\"/\"].join(''):null),cljs.core.str.cljs$core$IFn$_invoke$arity$1(fn_name)].join('');\r\n});\r\ndevtools.munging.present_protocol_part = (function devtools$munging$present_protocol_part(protocol_ns,protocol_name,protocol_method,include_protocol_ns_QMARK_){\r\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(include_protocol_ns_QMARK_)?protocol_ns:null)),(((!(cljs.core.empty_QMARK_(protocol_name))))?[(cljs.core.truth_(include_protocol_ns_QMARK_)?\".\":null),cljs.core.str.cljs$core$IFn$_invoke$arity$1(protocol_name)].join(''):null),(((!(cljs.core.empty_QMARK_(protocol_method))))?[(cljs.core.truth_((function (){var or__4126__auto__ = include_protocol_ns_QMARK_;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn (!(cljs.core.empty_QMARK_(protocol_name)));\r\n}\r\n})())?\":\":null),cljs.core.str.cljs$core$IFn$_invoke$arity$1(protocol_method)].join(''):null)].join('');\r\n});\r\n/**\r\n * Given javascript function name tries to present it as plain string for display in UI on best effort basis.\r\n */\r\ndevtools.munging.present_function_name = (function devtools$munging$present_function_name(munged_name,options){\r\nvar map__67106 = options;\r\nvar map__67106__$1 = (((((!((map__67106 == null))))?(((((map__67106.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__67106.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__67106):map__67106);\r\nvar include_ns_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__67106__$1,new cljs.core.Keyword(null,\"include-ns?\",\"include-ns?\",-341372810));\r\nvar include_protocol_ns_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__67106__$1,new cljs.core.Keyword(null,\"include-protocol-ns?\",\"include-protocol-ns?\",989250951));\r\nvar silence_common_protocols_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__67106__$1,new cljs.core.Keyword(null,\"silence-common-protocols?\",\"silence-common-protocols?\",2012431893));\r\nvar ns_detector = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__67106__$1,new cljs.core.Keyword(null,\"ns-detector\",\"ns-detector\",-2041592760));\r\nvar vec__67107 = devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$2(munged_name,ns_detector);\r\nvar fn_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67107,(0),null);\r\nvar fn_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67107,(1),null);\r\nvar protocol_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67107,(2),null);\r\nvar protocol_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67107,(3),null);\r\nvar protocol_method = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67107,(4),null);\r\nvar arity = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67107,(5),null);\r\nvar arity_str = (((!((arity == null))))?((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arity,\"variadic\"))?\"\\u207F\":devtools.munging.make_superscript(arity)):null);\r\nif(cljs.core.empty_QMARK_(fn_name)){\r\nreturn munged_name;\r\n} else {\r\nvar fn_part = devtools.munging.present_fn_part(fn_ns,fn_name,include_ns_QMARK_);\r\nvar protocol_part = (cljs.core.truth_((function (){var and__4115__auto__ = protocol_ns;\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn cljs.core.not((function (){var and__4115__auto____$1 = silence_common_protocols_QMARK_;\r\nif(cljs.core.truth_(and__4115__auto____$1)){\r\nreturn devtools.munging.common_protocol_QMARK_(protocol_ns,protocol_name);\r\n} else {\r\nreturn and__4115__auto____$1;\r\n}\r\n})());\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n})())?devtools.munging.present_protocol_part(protocol_ns,protocol_name,protocol_method,include_protocol_ns_QMARK_):null);\r\nreturn [(function (){var or__4126__auto__ = protocol_part;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn fn_part;\r\n}\r\n})(),arity_str,(cljs.core.truth_(protocol_part)?[\" (\",fn_part,\")\"].join(''):null)].join('');\r\n}\r\n});\r\ndevtools.munging.get_basis = (function devtools$munging$get_basis(f){\r\nvar o__65789__auto__ = f;\r\nreturn (o__65789__auto__[\"getBasis\"]).call(o__65789__auto__);\r\n});\r\n/**\r\n * Given a Javascript constructor function tries to retrieve [ns name basis]. Returns nil if not a cljs type.\r\n */\r\ndevtools.munging.parse_constructor_info = (function devtools$munging$parse_constructor_info(f){\r\nif(cljs.core.truth_((function (){var and__4115__auto__ = goog.isObject(f);\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn f.cljs$lang$type;\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n})())){\r\nvar type_name = devtools.munging.get_type_name(f);\r\nvar parts = type_name.split(/\\//);\r\nvar basis = (function (){try{return devtools.munging.get_basis(f);\r\n}catch (e67126){var _e__65811__auto__ = e67126;\r\nreturn cljs.core.PersistentVector.EMPTY;\r\n}})();\r\nif((cljs.core.count(parts) <= (2))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (<= (count parts) 2)\"));\r\n}\r\n\r\nwhile(true){\r\nif((cljs.core.count(parts) < (2))){\r\nparts.unshift(null);\r\n\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(parts),basis);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ndevtools.munging.protocol_path = (function devtools$munging$protocol_path(protocol_selector){\r\nreturn clojure.string.split.cljs$core$IFn$_invoke$arity$2(protocol_selector,/\\./);\r\n});\r\ndevtools.munging.get_protocol_object = (function devtools$munging$get_protocol_object(protocol_selector){\r\nvar obj = devtools.munging.get_global_scope.call(null);\r\nvar path = devtools.munging.protocol_path(protocol_selector);\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(path)){\r\nreturn obj;\r\n} else {\r\nif(cljs.core.truth_(goog.isObject(obj))){\r\nvar G__67438 = (obj[cljs.core.first(path)]);\r\nvar G__67439 = cljs.core.rest(path);\r\nobj = G__67438;\r\npath = G__67439;\r\ncontinue;\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\ndevtools.munging.protocol_exists_QMARK_ = (function devtools$munging$protocol_exists_QMARK_(protocol_selector){\r\nreturn (!((devtools.munging.get_protocol_object(protocol_selector) == null)));\r\n});\r\ndevtools.munging.get_protocol_selector = (function devtools$munging$get_protocol_selector(key){\r\nvar temp__5733__auto__ = cljs.core.re_matches(/(.*)\\$$/,key);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar m = temp__5733__auto__;\r\nif((!(clojure.string.includes_QMARK_(key,\"cljs$lang$protocol_mask$partition\")))){\r\nvar protocol_selector = clojure.string.replace(cljs.core.second(m),\"$\",\".\");\r\nif(devtools.munging.protocol_exists_QMARK_(protocol_selector)){\r\nreturn protocol_selector;\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ndevtools.munging.demunge_protocol_selector = (function devtools$munging$demunge_protocol_selector(protocol_selector){\r\nvar parts = cljs.core.map.cljs$core$IFn$_invoke$arity$2(devtools.munging.proper_demunge,devtools.munging.protocol_path(protocol_selector));\r\nvar _ = (((cljs.core.count(parts) >= (2)))?null:(function(){throw (new Error([\"Assert failed: \",[\"expected protocol selector to contain at least one dot: '\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(protocol_selector),\"'\"].join(''),\"\\n\",\"(>= (count parts) 2)\"].join('')))})());\r\nvar ns = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\".\",cljs.core.butlast(parts));\r\nvar name = cljs.core.last(parts);\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns,name,protocol_selector], null);\r\n});\r\ndevtools.munging.fast_path_protocols_lookup_table = (new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentArrayMap(null, 2, [(0),cljs.core.PersistentHashMap.fromArrays([(8192),(4096),(524288),(128),(1048576),(1),(32768),(4),(268435456),(512),(33554432),(32),(256),(1024),(134217728),(16777216),(64),(262144),(2),(4194304),(131072),(67108864),(8388608),(16),(2097152),(1073741824),(2147483648),(2048),(8),(65536),(16384)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IStack\",\"cljs.core.IStack\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ISet\",\"cljs.core.ISet\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IReduce\",\"cljs.core.IReduce\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"INext\",\"cljs.core.INext\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IKVReduce\",\"cljs.core.IKVReduce\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IFn\",\"cljs.core.IFn\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IDeref\",\"cljs.core.IDeref\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IEmptyableCollection\",\"cljs.core.IEmptyableCollection\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ISorted\",\"cljs.core.ISorted\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IAssociative\",\"cljs.core.IAssociative\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IList\",\"cljs.core.IList\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ASeq\",\"cljs.core.ASeq\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ILookup\",\"cljs.core.ILookup\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IMap\",\"cljs.core.IMap\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IReversible\",\"cljs.core.IReversible\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ISequential\",\"cljs.core.ISequential\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ISeq\",\"cljs.core.ISeq\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IWithMeta\",\"cljs.core.IWithMeta\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ICounted\",\"cljs.core.ICounted\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IHash\",\"cljs.core.IHash\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IMeta\",\"cljs.core.IMeta\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IRecord\",\"cljs.core.IRecord\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ISeqable\",\"cljs.core.ISeqable\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IIndexed\",\"cljs.core.IIndexed\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IEquiv\",\"cljs.core.IEquiv\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IWriter\",\"cljs.core.IWriter\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IPrintWithWriter\",\"cljs.core.IPrintWithWriter\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IMapEntry\",\"cljs.core.IMapEntry\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ICollection\",\"cljs.core.ICollection\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IDerefWithTimeout\",\"cljs.core.IDerefWithTimeout\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IVector\",\"cljs.core.IVector\"], null)]),(1),cljs.core.PersistentHashMap.fromArrays([(8192),(4096),(128),(1),(32768),(4),(512),(32),(256),(1024),(64),(2),(131072),(16),(2048),(8),(65536),(16384)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ICloneable\",\"cljs.core.ICloneable\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"INamed\",\"cljs.core.INamed\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ITransientSet\",\"cljs.core.ITransientSet\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IPending\",\"cljs.core.IPending\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IReset\",\"cljs.core.IReset\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IEditableCollection\",\"cljs.core.IEditableCollection\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IChunkedSeq\",\"cljs.core.IChunkedSeq\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ITransientMap\",\"cljs.core.ITransientMap\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IMultiFn\",\"cljs.core.IMultiFn\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IChunkedNext\",\"cljs.core.IChunkedNext\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ITransientVector\",\"cljs.core.ITransientVector\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IWatchable\",\"cljs.core.IWatchable\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IIterable\",\"cljs.core.IIterable\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ITransientAssociative\",\"cljs.core.ITransientAssociative\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IComparable\",\"cljs.core.IComparable\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ITransientCollection\",\"cljs.core.ITransientCollection\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"ISwap\",\"cljs.core.ISwap\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cljs.core\",\"IAtom\",\"cljs.core.IAtom\"], null)])], null);\r\n}),null));\r\ndevtools.munging.key_for_protocol_partition = (function devtools$munging$key_for_protocol_partition(partition){\r\nreturn [\"cljs$lang$protocol_mask$partition\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(partition),\"$\"].join('');\r\n});\r\ndevtools.munging.scan_fast_path_protocols_partition = (function devtools$munging$scan_fast_path_protocols_partition(obj,partition){\r\nif(typeof partition === 'number'){\r\n} else {\r\nthrow (new Error(\"Assert failed: (number? partition)\"));\r\n}\r\n\r\nvar partition_key = devtools.munging.key_for_protocol_partition(partition);\r\nvar partition_bits = (function (){var or__4126__auto__ = (obj[partition_key]);\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn (0);\r\n}\r\n})();\r\nif((partition_bits > (0))){\r\nvar lookup_table = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(devtools.munging.fast_path_protocols_lookup_table),partition);\r\nvar _ = ((cljs.core.map_QMARK_(lookup_table))?null:(function(){throw (new Error([\"Assert failed: \",[\"fast-path-protocols-lookup-table does not contain lookup table for partition \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(partition)].join(''),\"\\n\",\"(map? lookup-table)\"].join('')))})());\r\nvar _STAR_ = (function (accum,p__67163){\r\nvar vec__67164 = p__67163;\r\nvar bit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67164,(0),null);\r\nvar protocol = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67164,(1),null);\r\nif(((partition_bits & bit) === (0))){\r\nreturn accum;\r\n} else {\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(accum,protocol);\r\n}\r\n});\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_STAR_,cljs.core.PersistentVector.EMPTY,lookup_table);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ndevtools.munging.scan_fast_path_protocols = (function devtools$munging$scan_fast_path_protocols(obj){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(devtools.munging.scan_fast_path_protocols_partition,obj),cljs.core.range.cljs$core$IFn$_invoke$arity$1((2))));\r\n});\r\ndevtools.munging.scan_slow_path_protocols = (function devtools$munging$scan_slow_path_protocols(obj){\r\nvar keys = goog.object.getKeys(obj);\r\nvar selectors = cljs.core.keep.cljs$core$IFn$_invoke$arity$2(devtools.munging.get_protocol_selector,keys);\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(devtools.munging.demunge_protocol_selector,selectors);\r\n});\r\ndevtools.munging.make_protocol_descriptor = (function devtools$munging$make_protocol_descriptor(ns,name,selector,fast_QMARK_){\r\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),name,new cljs.core.Keyword(null,\"selector\",\"selector\",762528866),selector,new cljs.core.Keyword(null,\"fast?\",\"fast?\",-1813307150),fast_QMARK_], null);\r\n});\r\ndevtools.munging.convert_to_protocol_descriptor = (function devtools$munging$convert_to_protocol_descriptor(fast_QMARK_,p__67175){\r\nvar vec__67176 = p__67175;\r\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67176,(0),null);\r\nvar name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67176,(1),null);\r\nvar selector = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67176,(2),null);\r\nreturn devtools.munging.make_protocol_descriptor(ns,name,selector,fast_QMARK_);\r\n});\r\ndevtools.munging.protocol_descriptors_comparator = (function devtools$munging$protocol_descriptors_comparator(a,b){\r\nreturn cljs.core.compare(new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(a),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(b));\r\n});\r\ndevtools.munging.scan_protocols = (function devtools$munging$scan_protocols(obj){\r\nvar fast_path_protocols = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(devtools.munging.convert_to_protocol_descriptor,true),devtools.munging.scan_fast_path_protocols(obj));\r\nvar slow_path_protocols = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(devtools.munging.convert_to_protocol_descriptor,false),devtools.munging.scan_slow_path_protocols(obj));\r\nvar all_protocols = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fast_path_protocols,slow_path_protocols);\r\nreturn cljs.core.sort.cljs$core$IFn$_invoke$arity$2(devtools.munging.protocol_descriptors_comparator,all_protocols);\r\n});\r\ndevtools.munging.collect_protocol_methods = (function devtools$munging$collect_protocol_methods(obj,protocol_selector){\r\nvar key_prefix = clojure.string.replace(protocol_selector,/\\./,\"\\\\$\");\r\nvar pattern = cljs.core.re_pattern([\"^\",key_prefix,\"\\\\$(.*)\\\\$arity\\\\$(\\\\d+)$\"].join(''));\r\nvar all_keys = goog.object.getKeys(obj);\r\nvar matches = cljs.core.keep.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.re_matches,pattern),all_keys);\r\nvar methods$ = cljs.core.group_by(cljs.core.second,matches);\r\nvar match_to_arity = (function (match){\r\nvar arity = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(match,(2));\r\nreturn parseInt(arity,(10));\r\n});\r\nvar match_arity_comparator = (function (a,b){\r\nreturn cljs.core.compare(match_to_arity(a),match_to_arity(b));\r\n});\r\nvar post_process = (function (p__67202){\r\nvar vec__67203 = p__67202;\r\nvar munged_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67203,(0),null);\r\nvar matches__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67203,(1),null);\r\nvar name = devtools.munging.proper_demunge(munged_name);\r\nvar sorted_matches = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(match_arity_comparator,matches__$1);\r\nvar sorted_fns = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__67196_SHARP_){\r\nreturn (obj[cljs.core.first(p1__67196_SHARP_)]);\r\n}),sorted_matches);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name,sorted_fns], null);\r\n});\r\nvar by_name_comparator = (function (a,b){\r\nreturn cljs.core.compare(cljs.core.first(a),cljs.core.first(b));\r\n});\r\nreturn cljs.core.sort.cljs$core$IFn$_invoke$arity$2(by_name_comparator,cljs.core.map.cljs$core$IFn$_invoke$arity$2(post_process,methods$));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This namespace implements various heuristics to map Javascript names back to corresponding ClojureScript names.\n  The functionality here heavily depends on observed ClojureScript compiler and runtime behaviour (fragile!).\n  Answers given by functions in this namespace cannot be perfect because generated Javascript naming schemes produced by\n  ClojureScript compiler were not designed with easy reversibility in mind. We recommend this functionality to be used for\n  presentation in the UI only. The goal here is to provide user with more familiar view of runtime state of her app\n  in most common cases (on best effort basis).\n\n  Our main weapons in this uneven fight are:\n    1. munged function names as they appear in Javascript (generated by ClojureScript)\n    2. we can also analyze function sources accessible via .toString\n    3. special cljs$core$IFn$_invoke protocol props generated for multi-arity functions\n\n  We can also cheat and look at runtime state of browser environment to determine some answers about namespaces.\n\n  This code can be used only in non-advanced builds!\n\n  If you discovered breakage or a new case which should be covered by this code, please open an issue:\n    https://github.com/binaryage/cljs-devtools/issues","~:file","devtools/munging.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$get-fast-path-protocol-partitions-count","~$devtools.munging","~$get-fast-path-protocols-lookup-table","^I","~$oget","~$devtools.oops","~$ocall","^L","~$safe-call","^L"],"~:excludes",["~#set",["~$js-reserved?"]],"~:macros",["^ ","^H",["^ ","~:arglists",["~#list",[[]]],"^8",28,"^9",1,"^7","devtools/munging.clj","~:name","~$devtools.munging/get-fast-path-protocol-partitions-count","~:ns","^I","~:macro",true],"^J",["^ ","^S",["^T",[[]]],"^8",21,"^9",1,"^7","devtools/munging.clj","^U","~$devtools.munging/get-fast-path-protocols-lookup-table","^W","^I","^X",true],"~$get-fast-path-protocols",["^ ","^S",["^T",[[]]],"^8",12,"^9",1,"^7","devtools/munging.clj","^U","~$devtools.munging/get-fast-path-protocols","^W","^I","^X",true]],"^U","^I","~:op","^W","~:imports",["^ ","~$StringBuffer","~$goog.string.StringBuffer"],"~:requires",["^ ","~$cljs.core","^15","~$gobj","~$goog.object","~$goog","^18","^17","^17","^13","^13","^12","^13","~$string","~$clojure.string","~$devtools.context","^1;","^1:","^1:","~$context","^1;"],"~:seen",["^P",["~:require","~:require-macros"]],"~:uses",null,"^1?",["^ ","^I","^I","^L","^L","^15","^15"],"~:form",["^T",["~$ns","^I","This namespace implements various heuristics to map Javascript names back to corresponding ClojureScript names.\n  The functionality here heavily depends on observed ClojureScript compiler and runtime behaviour (fragile!).\n  Answers given by functions in this namespace cannot be perfect because generated Javascript naming schemes produced by\n  ClojureScript compiler were not designed with easy reversibility in mind. We recommend this functionality to be used for\n  presentation in the UI only. The goal here is to provide user with more familiar view of runtime state of her app\n  in most common cases (on best effort basis).\n\n  Our main weapons in this uneven fight are:\n    1. munged function names as they appear in Javascript (generated by ClojureScript)\n    2. we can also analyze function sources accessible via .toString\n    3. special cljs$core$IFn$_invoke protocol props generated for multi-arity functions\n\n  We can also cheat and look at runtime state of browser environment to determine some answers about namespaces.\n\n  This code can be used only in non-advanced builds!\n\n  If you discovered breakage or a new case which should be covered by this code, please open an issue:\n    https://github.com/binaryage/cljs-devtools/issues",["^T",["~:refer-clojure","~:exclude",["^Q"]]],["^T",["^1?",["^I","~:refer",["^H","^J"]],["^L","^1E",["^K","^M","^N"]]]],["^T",["^1>",["^1:","~:as","^19"],["^1;","^1F","^1<"],["^17","^1F","^16"]]],["^T",["~:import",["~$goog.string","^12"]]]]],"~:flags",["^ ","^1?",["^P",[]],"^1>",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^18","^15","^1:","^1;","^17","^13"]],"^W","^I","~:resource-id",["~:shadow.build.classpath/resource","devtools/munging.cljs"],"~:compiled-at",1633159632665,"~:resource-name","devtools/munging.cljs","~:warnings",[],"~:source","(ns devtools.munging\n  \"This namespace implements various heuristics to map Javascript names back to corresponding ClojureScript names.\n  The functionality here heavily depends on observed ClojureScript compiler and runtime behaviour (fragile!).\n  Answers given by functions in this namespace cannot be perfect because generated Javascript naming schemes produced by\n  ClojureScript compiler were not designed with easy reversibility in mind. We recommend this functionality to be used for\n  presentation in the UI only. The goal here is to provide user with more familiar view of runtime state of her app\n  in most common cases (on best effort basis).\n\n  Our main weapons in this uneven fight are:\n    1. munged function names as they appear in Javascript (generated by ClojureScript)\n    2. we can also analyze function sources accessible via .toString\n    3. special cljs$core$IFn$_invoke protocol props generated for multi-arity functions\n\n  We can also cheat and look at runtime state of browser environment to determine some answers about namespaces.\n\n  This code can be used only in non-advanced builds!\n\n  If you discovered breakage or a new case which should be covered by this code, please open an issue:\n    https://github.com/binaryage/cljs-devtools/issues\"\n  (:refer-clojure :exclude [js-reserved?])\n  (:require-macros [devtools.munging :refer [get-fast-path-protocol-partitions-count\n                                             get-fast-path-protocols-lookup-table]]\n                   [devtools.oops :refer [oget ocall safe-call]])\n  (:require [clojure.string :as string]\n            [devtools.context :as context]\n            [goog.object :as gobj])\n  (:import [goog.string StringBuffer]))\n\n(declare collect-fn-arities)\n\n(def dollar-replacement \"~﹩~\")\n(def max-fixed-arity-to-scan 64)\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic get-global-scope []\n  (context/get-root))\n\n(defn js-reserved? [x]\n  ; js-reserved? is private as of ClojureScript 1.9.293\n  (if-let [js-reserved-fn (oget (get-global-scope) \"cljs\" \"core\" \"js_reserved_QMARK_\")]\n    (js-reserved-fn x)))\n\n(defn get-fn-source-safely [f]\n  (try\n    (if (js-in \"toString\" f)\n      (ocall f \"toString\")\n      \"\")\n    (catch :default _\n      \"\")))\n\n(defn get-fn-fixed-arity [f n]\n  (oget f (str \"cljs$core$IFn$_invoke$arity$\" n)))\n\n(defn get-fn-variadic-arity [f]\n  (oget f (str \"cljs$core$IFn$_invoke$arity$variadic\")))\n\n(defn get-fn-max-fixed-arity [f]\n  (oget f \"cljs$lang$maxFixedArity\"))\n\n(defn get-type-name [t]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (try\n      ; we cannot use (type->str f) because it does not work for defrecords as of v1.9.89\n      ; instead we rely on .cljs$lang$ctorPrWriter which is defined for both deftypes and defrecords\n      ; and it is used here: https://github.com/clojure/clojurescript/blob/cfbefad0b9f2ae9af92ebc2ec211c8472a884ddf/src/main/cljs/cljs/core.cljs#L9173\n      ; relevant JIRA ticket: http://dev.clojure.org/jira/browse/CLJS-1725\n      (ocall t \"cljs$lang$ctorPrWriter\" t writer)\n      (catch :default _\n        \"?\"))\n    (-flush writer)\n    (str sb)))\n\n(defn char-to-subscript\n  \"Given a character with a single digit converts it into a subscript character.\n  Zero character maps to unicode 'SUBSCRIPT ZERO' (U+2080).\"\n  [char]\n  {:pre [(string? char)\n         (= (count char) 1)]}\n  (let [char-code (ocall (js/String. char) \"charCodeAt\" 0)                                                                    ; this is an ugly trick to overcome a V8? bug, char string might not be a real string \"object\"\n        num-code (- char-code 48)\n        subscript-code (+ 0x2080 num-code)]\n    (ocall js/String \"fromCharCode\" subscript-code)))\n\n(defn make-subscript\n  \"Given a subscript number converts it into a string representation consisting of unicode subscript characters (digits).\"\n  [subscript]\n  {:pre [(number? subscript)]}\n  (string/join (map char-to-subscript (str subscript))))\n\n(defn char-to-superscript\n  \"Given a character with a single digit converts it into a superscript character.\n  Zero character maps to unicode 'SUPERSCRIPT ZERO' (U+2070).\"\n  [char]\n  {:pre [(string? char)\n         (= (count char) 1)]}\n  (let [char-code (ocall (js/String. char) \"charCodeAt\" 0)                                                                    ; this is an ugly trick to overcome a V8? bug, char string might not be a real string \"object\"\n        num-code (- char-code 48)\n        superscript-code (case num-code                                                                                       ; see https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts\n                           1 0x00B9\n                           2 0x00B2\n                           3 0x00B3\n                           (+ 0x2070 num-code))]\n    (ocall js/String \"fromCharCode\" superscript-code)))\n\n(defn make-superscript\n  \"Given a superscript number converts it into a string representation consisting of unicode superscript characters (digits).\"\n  [superscript]\n  {:pre [(number? superscript)]}\n  (string/join (map char-to-superscript (str superscript))))\n\n; -- cljs naming conventions ------------------------------------------------------------------------------------------------\n\n(defn cljs-fn-name?\n  \"Given a Javascript name answers if the name was likely generated by ClojureScript.\n  We use a simple heuristic here:\n    The name must contain at least two separate dollars because we assume two-segment namespaces.\"\n  [munged-name]\n  (if (string? munged-name)\n    (some? (re-matches #\"^[^$]*\\$[^$]+\\$.*$\" munged-name))))\n\n(defn parse-fn-source\n  \"Given a function source code parses out [name args]. Note that both strings are still munged.\n  Suitable for further processing.\n\n  For example for input below the function will return [\\\"devtools_sample$core$hello\\\" \\\"name, unused_param\\\"]:\n\n  function devtools_sample$core$hello(name, unused_param){\n    return [cljs.core.str(\\\"hello, \\\"),cljs.core.str(name),cljs.core.str(\\\"!\\\")].join('');\n  }\n  \"\n  [fn-source]\n  (if-let [meat (second (re-find #\"function\\s(.*?)\\{\" fn-source))]\n    (if-let [match (re-find #\"(.*?)\\((.*)\\)\" meat)]\n      (rest match))))\n\n(defn trivial-fn-source? [fn-source]\n  {:pre [(string? fn-source)]}\n  (or (some? (re-matches #\"function\\s*\\(\\s*\\)\\s*\\{\\s*\\}\\s*\" fn-source))\n      (some? (re-matches #\"function.*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*\" fn-source))\n      (some? (re-matches #\"function anonymous\\(\\s*\\)\\s*\\{\\s*\\}\" fn-source))))\n\n(defn cljs-fn?\n  \"Given a Javascript function object returns true if the function looks like a ClojureScript function.\n\n  Uses various heuristics:\n    1. must be fn? (is javascript function or satisfies Fn and IFn protocols)\n    2. and name must be cljs-fn-name? (name can come from f.name or parsed out of function source)\n    3. or if anonymous function, must be non-trivial\"\n  [f]\n  (if (safe-call fn? false f)                                                                                                 ; calling fn? on window object could throw for some weird reason\n    (let [name (oget f name)]\n      (if-not (empty? name)\n        (cljs-fn-name? name)\n        (let [fn-source (get-fn-source-safely f)]\n          (let [[name] (parse-fn-source fn-source)]\n            (if-not (empty? name)\n              (cljs-fn-name? name)\n              (not (trivial-fn-source? fn-source)))))))))                                                                     ; we assume non-trivial anonymous functions to come from cljs\n\n; -- demunging --------------------------------------------------------------------------------------------------------------\n\n(defn dollar-preserving-demunge\n  \"Standard cljs.core/demunge is too aggressive in replacing dollars.\n  This wrapper function works around it by leaving dollars intact.\"\n  [munged-name]\n  (-> munged-name\n      (string/replace \"$\" dollar-replacement)\n      (demunge)\n      (string/replace dollar-replacement \"$\")))\n\n(defn revert-reserved [s]\n  (or (if-let [m (re-matches #\"(.*)\\$\" s)]\n        (if (js-reserved? (second m))\n          (second m)))\n      s))\n\n(defn reserved-aware-demunge [munged-name]\n  (-> munged-name\n      (dollar-preserving-demunge)\n      (revert-reserved)))\n\n(defn proper-demunge [munged-name]\n  (reserved-aware-demunge munged-name))\n\n(defn proper-arg-demunge [munged-arg-name]\n  (-> munged-arg-name\n      (proper-demunge)\n      (string/replace #\"^-(.*)$\" \"_$1\")))                                                                                     ; leading dash was probably a leading underscore (convention)\n\n(defn proper-ns-demunge [munged-ns-name]\n  (-> munged-ns-name\n      (proper-demunge)\n      (string/replace \"$\" \".\")))\n\n(defn ns-exists? [ns-module-name]\n  {:pre [(string? ns-module-name)]}\n  (if-some [ns-obj (gobj/getValueByKeys (get-global-scope) (.split ns-module-name \".\"))]\n    (object? ns-obj)))\n\n(defn detect-namespace-prefix\n  \"Given a name broken into namespace parts returns [detected-ns remaining-parts],\n  where detected-ns is a string representing longest detected existing namespace and\n  remaining-parts is a vector of remaining input parts not included in the detected-ns concatenation.\n\n  For given input [\\\"cljs\\\" \\\"core\\\" \\\"first\\\"] returns [\\\"cljs.core\\\" [\\\"first\\\"]] (assuming cljs.core exists)\"\n  [tokens & [ns-detector]]\n  (let [effective-detector (or ns-detector ns-exists?)]\n    (loop [name-tokens []\n           remaining-tokens tokens]\n      (if (empty? remaining-tokens)\n        [\"\" name-tokens]\n        (let [ns-name (string/join \".\" remaining-tokens)]\n          (if (effective-detector ns-name)\n            [ns-name name-tokens]\n            (recur (concat [(last remaining-tokens)] name-tokens) (butlast remaining-tokens))))))))\n\n(defn normalize-arity [arity-tokens]\n  (if-not (empty? arity-tokens)\n    (let [arity (first arity-tokens)]\n      (case arity\n        \"variadic\" arity\n        (js/parseInt arity 10)))))\n\n(defn strip-arity [tokens]\n  (let [[prefix-tokens arity-tokens] (split-with #(not= % \"arity\") tokens)]\n    [prefix-tokens (normalize-arity (rest arity-tokens))]))\n\n(defn parse-protocol [tokens detector]\n  (loop [remaining-tokens tokens\n         name-tokens []]\n    (if (empty? remaining-tokens)\n      [name-tokens]\n      (let [[protocol-ns name-and-method-tokens] (detect-namespace-prefix remaining-tokens detector)]\n        (if (empty? protocol-ns)\n          (recur (rest remaining-tokens) (conj name-tokens (first remaining-tokens)))\n          [name-tokens protocol-ns (first name-and-method-tokens) (rest name-and-method-tokens)])))))                         ; we assume protocol names are always a single-token\n\n(defn break-munged-name\n  \"Given a munged-name from Javascript lands attempts to break it into:\n  [fn-ns fn-name protocol-ns protocol-name protocol-method arity].\n\n  Protocol and arity elements are optional. Function elements are always present or \\\"\\\".\n\n  examples for input:\n    cljs$core$rest => ['cljs.core', 'rest']\n    cljs.core.reduce$cljs$core$IFn$_invoke$arity$3 => ['cljs.core' 'reduce' 'cljs.core' 'IFn' '_invoke' 3]\"\n  ([munged-name]\n   (break-munged-name munged-name nil))\n  ([munged-name ns-detector]\n   (if (empty? munged-name)\n     [\"\" \"\"]\n     (let [effective-detector (or ns-detector ns-exists?)\n           tokens (vec (.split munged-name #\"[$.]\"))\n           [tokens arity] (strip-arity tokens)\n           [fn-ns tokens] (detect-namespace-prefix tokens effective-detector)\n           ; remaining parts contains function name,\n           ; but may be optionally followed by protocol namespace, protocol name and protocol method\n           [fn-name-tokens protocol-ns protocol-name protocol-method-tokens] (parse-protocol tokens effective-detector)\n           fn-name (string/join \"$\" fn-name-tokens)\n           protocol-method (if protocol-method-tokens (string/join \"$\" protocol-method-tokens))]\n       [fn-ns fn-name protocol-ns protocol-name protocol-method arity]))))\n\n(defn break-and-demunge-name\n  \"Given a munged-name from Javascript lands attempts to break it into a namespace part and remaining short name.\n  Then applies appropriate demunging on them and returns ClojureScript versions of the names.\"\n  ([munged-name]\n   (break-and-demunge-name munged-name nil))\n  ([munged-name ns-detector]\n   (let [result (break-munged-name munged-name ns-detector)\n         [munged-ns munged-name munged-protocol-ns munged-protocol-name munged-protocol-method arity] result]\n     [(proper-ns-demunge munged-ns)\n      (proper-demunge munged-name)\n      (if munged-protocol-ns (proper-ns-demunge munged-protocol-ns))\n      (if munged-protocol-name (proper-demunge munged-protocol-name))\n      (if munged-protocol-method (proper-demunge munged-protocol-method))\n      arity])))\n\n; -- fn info ----------------------------------------------------------------------------------------------------------------\n\n(defn parse-fn-source-info\n  \"Given function source code tries to retrieve [ns name & args] on best effort basis, where\n  ns is demunged namespace part of the function name (or \\\"\\\" if namespace cannot be detected)\n  name is demunged short name (or \\\"\\\" if function is anonymous or name cannot be retrieved)\n  args is optional number of demunged argument names.\n\n  Please note that this function always returns a vector with something. In worst cases [\\\"\\\" \\\"\\\"].\n  \"\n  [fn-source]\n  (if-let [[munged-name args] (parse-fn-source fn-source)]\n    (let [[ns name] (break-and-demunge-name munged-name)\n          demunged-args (map (comp proper-arg-demunge string/trim) (string/split args #\",\"))]\n      (concat [ns name] demunged-args))\n    [\"\" \"\"]))\n\n(defn parse-fn-info\n  \"Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-source-info (on best effort basis).\"\n  [f]\n  (let [fn-source (get-fn-source-safely f)]\n    (parse-fn-source-info fn-source)))\n\n(defn parse-fn-info-deep\n  \"Given a Javascript function object tries to retrieve [ns name & args] as in parse-fn-info (on best effort basis).\n\n  The difference from parse-fn-info is that this function prefers to read args from arities if available.\n  It recurse arbitrary deep following IFn protocol leads.\n\n  If we hit multi-arity situation in leaf, we don't attempt to list arguments and return ::multi-arity placeholder instead.\n\n  The reason for reading arities is that it gives more accurate parameter names in some cases.\n  We observed that variadic functions don't always contain original parameter names, but individual IFn arity functions do.\"\n  [f]\n  (let [fn-info (parse-fn-info f)\n        arities (collect-fn-arities f)]\n    (if (some? arities)\n      (if (> (count arities) 1)\n        (concat (take 2 fn-info) ::multi-arity)\n        (concat (take 2 fn-info) (drop 2 (parse-fn-info-deep (second (first arities))))))\n      fn-info)))\n\n; -- support for human-readable names ---------------------------------------------------------------------------------------\n\n(defn find-index-of-human-prefix\n  \"Given a demunged ClojureScript parameter name. Tries to detect human readable part and returns the index where it ends.\n  Returns nil if no prefix can be detected.\n\n  The idea is to convert macro-generated parameters and other generated names to more friendly names.\n  We observed that param names generated by gensym have prefix followed by big numbers.\n  Other generated names contain two dashes after prefix (originally probably using underscores).\"\n  [name]\n  (let [sep-start (.indexOf name \"--\")\n        num-prefix (count (second (re-find #\"(.*?)\\d{2,}\" name)))\n        finds (filter pos? [sep-start num-prefix])]\n    (if-not (empty? finds)\n      (apply min finds))))\n\n(defn humanize-name\n  \"Given a name and intermediate state. Convert name to a human readable version by keeping human readable prefix with\n  optional subscript postfix and store it in ::result. Subscript number is picked based on state. State keeps track of\n  previously assigned subscripts. Returns a new state.\"\n  [state name]\n  (let [index (find-index-of-human-prefix name)\n        prefix (if (> index 0) (.substring name 0 index) name)]\n    (if-let [subscript (get state prefix)]\n      (-> state\n          (update ::result conj (str prefix (make-subscript subscript)))\n          (update prefix inc))\n      (-> state\n          (update ::result conj prefix)\n          (assoc prefix 2)))))\n\n(defn humanize-names\n  \"Given a list of names, returns a list of human-readable versions of those names.\n  It detects human-readable prefix using a simple heuristics. When names repeat it assigns simple subscripts starting with 2.\n  Subscripts are assigned left-to-right.\n\n  Given [\\\"p--a\\\" \\\"p--b\\\" \\\"x\\\" \\\"p--c\\\"] returns [\\\"p\\\" \\\"p₂\\\" \\\"x\\\" \\\"p₃\\\"]\"\n  [names]\n  (with-meta (::result (reduce humanize-name {::result []} names)) (meta names)))\n\n; -- arities ----------------------------------------------------------------------------------------------------------------\n\n(defn collect-fn-fixed-arities [f max-arity]\n  (loop [arity 0\n         collection {}]\n    (if (> arity max-arity)\n      collection\n      (recur (inc arity) (if-let [arity-fn (get-fn-fixed-arity f arity)]\n                           (assoc collection arity arity-fn)\n                           collection)))))\n\n(defn collect-fn-variadic-arities [f]\n  (if-let [variadic-arity (get-fn-variadic-arity f)]\n    {::variadic variadic-arity}))\n\n(defn review-arity [[arity arity-fn]]\n  (let [sub-arities (collect-fn-arities arity-fn)]\n    (if (::variadic sub-arities)\n      [::variadic arity-fn]\n      [arity arity-fn])))\n\n(defn review-arities\n  \"Some arities can be marked as fixed arity but in fact point to a variadic-arity function. We want to detect this case\n  and turn such improperly categorized arities to ::variadic.\"\n  [arities]\n  (if (::variadic arities)\n    arities\n    (into {} (map review-arity arities))))\n\n(defn collect-fn-arities\n  \"Given a Javascript function object, tries to inspect known arity properties generated by ClojureScript compiler and\n  collects all available arity functions into a map. Arities are keyed by arity count and variadic arity gets ::variadic key.\"\n  [f]\n  (let [max-fixed-arity (get-fn-max-fixed-arity f)\n        fixed-arities (collect-fn-fixed-arities f (or max-fixed-arity max-fixed-arity-to-scan))                               ; we cannot rely on cljs$lang$maxFixedArity when people implement IFn protocol by hand\n        variadic-arities (collect-fn-variadic-arities f)\n        arities (review-arities (merge fixed-arities variadic-arities))]\n    (if-not (empty? arities)\n      arities)))\n\n; -- args lists -------------------------------------------------------------------------------------------------------------\n\n(defn arity-keywords-comparator\n  \"::variadic goes last, other keywords compare by name.\"\n  [x y]\n  (cond\n    (= ::variadic x) 1\n    (= ::variadic y) -1\n    :else (compare (name x) (name y))))\n\n(defn arities-key-comparator\n  \"numbers go first (ordered), then keywords (ordered by name), and then ::variadic sticks last\"\n  [x y]\n  (let [kx? (keyword? x)\n        ky? (keyword? y)]\n    (cond\n      (and kx? ky?) (arity-keywords-comparator x y)\n      kx? 1\n      ky? -1\n      :else (compare x y))))\n\n(defn arities-to-args-lists*\n  [arities]\n  (let [sorted-keys (sort arities-key-comparator (keys arities))\n        sorted-fns (map #(get arities %) sorted-keys)\n        sorted-infos (map parse-fn-info-deep sorted-fns)\n        sorted-args-lists (map #(drop 2 %) sorted-infos)]\n    (if (= (last sorted-keys) ::variadic)\n      (concat (butlast sorted-args-lists) [(vary-meta (last sorted-args-lists) assoc ::variadic true)])\n      sorted-args-lists)))\n\n(defn arities-to-args-lists\n  \"Given a map of arity functions. Tries to parse individual functions and prepare an arguments list for each arity.\n  Returned list of arguments list is sorted by arity count, variadic arity goes last if available.\n\n  The function also optionally humanizes argument names in each arguments list if requested.\"\n  [arities & [humanize?]]\n  (let [args-lists (arities-to-args-lists* arities)]\n    (if humanize?\n      (map humanize-names args-lists)\n      args-lists)))\n\n; -- UI presentation --------------------------------------------------------------------------------------------------------\n\n(defn args-lists-to-strings\n  \"Converts a list of arguments lists into a list of strings suitable for UI presentation.\"\n  [args-lists spacer-symbol multi-arity-symbol rest-symbol]\n  (let [string-mapper (fn [arg]\n                        (case arg\n                          ::multi-arity multi-arity-symbol\n                          arg))\n        printer (fn [args-list]\n                  (let [variadic? (::variadic (meta args-list))\n                        args-strings (map string-mapper args-list)]\n                    (str (string/join spacer-symbol (butlast args-strings))\n                         (if variadic? rest-symbol spacer-symbol)\n                         (last args-strings))))]\n    (->> args-lists\n         (map printer)\n         (map string/trim))))\n\n(defn extract-arities [f humanize? spacer-symbol multi-arity-symbol rest-symbol]\n  (-> (or (collect-fn-arities f) {:naked f})\n      (arities-to-args-lists humanize?)\n      (args-lists-to-strings spacer-symbol multi-arity-symbol rest-symbol)))\n\n(defn common-protocol? [protocol-ns protocol-name]\n  (and (= protocol-ns \"cljs.core\")\n       (= protocol-name \"IFn\")))\n\n(defn present-fn-part [fn-ns fn-name include-ns?]\n  (str\n    (if (and include-ns? (not (empty? fn-ns))) (str fn-ns \"/\"))\n    fn-name))\n\n(defn present-protocol-part [protocol-ns protocol-name protocol-method include-protocol-ns?]\n  (str (if include-protocol-ns? protocol-ns)\n       (if-not (empty? protocol-name) (str (if include-protocol-ns? \".\") protocol-name))\n       (if-not (empty? protocol-method) (str (if (or include-protocol-ns? (not (empty? protocol-name))) \":\")\n                                             protocol-method))))\n\n(defn present-function-name\n  \"Given javascript function name tries to present it as plain string for display in UI on best effort basis.\"\n  [munged-name options]\n  (let [{:keys [include-ns? include-protocol-ns? silence-common-protocols? ns-detector]} options\n        [fn-ns fn-name protocol-ns protocol-name protocol-method arity] (break-and-demunge-name munged-name ns-detector)\n        arity-str (if (some? arity)\n                    (if (= arity \"variadic\")\n                      \"\\u207F\"                                                                                                ; 'SUPERSCRIPT LATIN SMALL LETTER N' (U+207F)\n                      (make-superscript arity)))]\n    (if (empty? fn-name)\n      munged-name\n      (let [fn-part (present-fn-part fn-ns fn-name include-ns?)\n            protocol-part (if (and protocol-ns\n                                   (not (and silence-common-protocols?\n                                             (common-protocol? protocol-ns protocol-name))))\n                            (present-protocol-part protocol-ns protocol-name protocol-method include-protocol-ns?))]\n        (str\n          (or protocol-part fn-part)\n          arity-str\n          (if protocol-part (str \" (\" fn-part \")\")))))))\n\n; -- types ------------------------------------------------------------------------------------------------------------------\n\n(defn get-basis [f]\n  (ocall f \"getBasis\"))\n\n(defn parse-constructor-info\n  \"Given a Javascript constructor function tries to retrieve [ns name basis]. Returns nil if not a cljs type.\"\n  [f]\n  (if (and (goog/isObject f) (.-cljs$lang$type f))\n    (let [type-name (get-type-name f)\n          parts (.split type-name #\"/\")\n          basis (safe-call get-basis [] f)]\n      (assert (<= (count parts) 2))\n      (while (< (count parts) 2)\n        (.unshift parts nil))\n      (conj (vec parts) basis))))\n\n; -- protocols --------------------------------------------------------------------------------------------------------------\n\n(defn protocol-path [protocol-selector]\n  (string/split protocol-selector #\"\\.\"))\n\n(defn get-protocol-object [protocol-selector]\n  (loop [obj (get-global-scope)\n         path (protocol-path protocol-selector)]\n    (if (empty? path)\n      obj\n      (if (goog/isObject obj)\n        (recur (oget obj (first path)) (rest path))))))\n\n(defn protocol-exists? [protocol-selector]\n  (some? (get-protocol-object protocol-selector)))\n\n(defn get-protocol-selector [key]\n  (if-let [m (re-matches #\"(.*)\\$$\" key)]\n    (if-not (string/includes? key \"cljs$lang$protocol_mask$partition\")\n      (let [protocol-selector (string/replace (second m) \"$\" \".\")]\n        (if (protocol-exists? protocol-selector)\n          protocol-selector)))))\n\n(defn demunge-protocol-selector [protocol-selector]\n  (let [parts (map proper-demunge (protocol-path protocol-selector))\n        _ (assert (>= (count parts) 2)\n                  (str \"expected protocol selector to contain at least one dot: '\" protocol-selector \"'\"))\n        ns (string/join \".\" (butlast parts))\n        name (last parts)]\n    [ns name protocol-selector]))\n\n(def fast-path-protocols-lookup-table (delay (get-fast-path-protocols-lookup-table)))\n\n(defn key-for-protocol-partition [partition]\n  (str \"cljs$lang$protocol_mask$partition\" partition \"$\"))\n\n(defn scan-fast-path-protocols-partition [obj partition]\n  {:pre [(number? partition)]}\n  (let [partition-key (key-for-protocol-partition partition)\n        partition-bits (or (oget obj partition-key) 0)]\n    (if (> partition-bits 0)\n      (let [lookup-table (get @fast-path-protocols-lookup-table partition)\n            _ (assert (map? lookup-table)\n                      (str \"fast-path-protocols-lookup-table does not contain lookup table for partition \" partition))\n            * (fn [accum [bit protocol]]\n                (if (zero? (bit-and partition-bits bit))\n                  accum\n                  (conj accum protocol)))]\n        (reduce * [] lookup-table)))))\n\n(defn scan-fast-path-protocols [obj]\n  (apply concat (map (partial scan-fast-path-protocols-partition obj) (range (get-fast-path-protocol-partitions-count)))))\n\n(defn scan-slow-path-protocols [obj]\n  (let [keys (gobj/getKeys obj)\n        selectors (keep get-protocol-selector keys)]\n    (map demunge-protocol-selector selectors)))\n\n(defn make-protocol-descriptor [ns name selector fast?]\n  {:ns       ns\n   :name     name\n   :selector selector\n   :fast?    fast?})\n\n(defn convert-to-protocol-descriptor [fast? [ns name selector]]\n  (make-protocol-descriptor ns name selector fast?))\n\n(defn protocol-descriptors-comparator [a b]\n  (compare (:name a) (:name b)))\n\n(defn scan-protocols [obj]\n  (let [fast-path-protocols (map (partial convert-to-protocol-descriptor true) (scan-fast-path-protocols obj))\n        slow-path-protocols (map (partial convert-to-protocol-descriptor false) (scan-slow-path-protocols obj))\n        all-protocols (concat fast-path-protocols slow-path-protocols)]\n    (sort protocol-descriptors-comparator all-protocols)))\n\n(defn collect-protocol-methods [obj protocol-selector]\n  (let [key-prefix (string/replace protocol-selector #\"\\.\" \"\\\\$\")\n        pattern (re-pattern (str \"^\" key-prefix \"\\\\$(.*)\\\\$arity\\\\$(\\\\d+)$\"))\n        all-keys (gobj/getKeys obj)\n        matches (keep (partial re-matches pattern) all-keys)\n        methods (group-by second matches)\n        match-to-arity (fn [match]\n                         (let [arity (nth match 2)]\n                           (js/parseInt arity 10)))\n        match-arity-comparator (fn [a b]\n                                 (compare (match-to-arity a) (match-to-arity b)))\n        post-process (fn [[munged-name matches]]\n                       (let [name (proper-demunge munged-name)\n                             sorted-matches (sort match-arity-comparator matches)\n                             sorted-fns (map #(oget obj (first %)) sorted-matches)]\n                         [name sorted-fns]))\n        by-name-comparator (fn [a b]\n                             (compare (first a) (first b)))]\n    ; TODO: he we could be able to retrieve parameter lists from protocol definition methods\n    ;       parameter names there are usually more consistent than parameters picked by protocol implementors\n    (sort by-name-comparator (map post-process methods))))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["devtools.munging/dollar-replacement","devtools.munging/max-fixed-arity-to-scan","devtools.munging/get-global-scope","devtools.context/get-root","devtools.munging/js-reserved?","x","temp__5733__auto__","js-reserved-fn","o66858","o66859","devtools.munging/get-fn-source-safely","f","e66863","o__65789__auto__","_","devtools.munging/get-fn-fixed-arity","n","devtools.munging/get-fn-variadic-arity","devtools.munging/get-fn-max-fixed-arity","devtools.munging/get-type-name","t","sb","js/goog.string.StringBuffer","writer","cljs.core/StringBufferWriter","e66881","js/Error","devtools.munging/char-to-subscript","char","cljs.core._EQ_","cljs.core/count","char-code","js/String","num-code","subscript-code","devtools.munging/make-subscript","subscript","clojure.string.join","cljs.core.map","devtools.munging/char-to-superscript","superscript-code","G__66885","devtools.munging/make-superscript","superscript","devtools.munging/cljs-fn-name?","munged-name","cljs.core/re-matches","devtools.munging/parse-fn-source","fn-source","meat","cljs.core/second","cljs.core/re-find","match","cljs.core/rest","devtools.munging/trivial-fn-source?","devtools.munging/cljs-fn?","_e__65811__auto__","e66905","cljs.core/fn?","name","cljs.core/name","cljs.core/empty?","vec__66910","cljs.core.nth","devtools.munging/dollar-preserving-demunge","clojure.string/replace","cljs.core/demunge","devtools.munging/revert-reserved","s","or__4126__auto__","m","devtools.munging/reserved-aware-demunge","devtools.munging/proper-demunge","devtools.munging/proper-arg-demunge","munged-arg-name","devtools.munging/proper-ns-demunge","munged-ns-name","devtools.munging/ns-exists?","ns-module-name","temp__5737__auto__","ns-obj","goog.object/getValueByKeys","cljs.core/object?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","devtools.munging/detect-namespace-prefix","p__66977","vec__66979","seq66966","G__66967","cljs.core/first","cljs.core/next","self__4723__auto__","tokens","ns-detector","effective-detector","name-tokens","remaining-tokens","ns-name","cljs.core.concat","cljs.core/last","cljs.core/butlast","devtools.munging/normalize-arity","arity-tokens","arity","G__66993","js/parseInt","devtools.munging/strip-arity","vec__66999","prefix-tokens","p1__66994#","cljs.core/split-with","cljs.core.not_EQ_","devtools.munging/parse-protocol","detector","vec__67009","protocol-ns","name-and-method-tokens","devtools.munging.detect_namespace_prefix","cljs.core.conj","G__67016","devtools.munging/break-munged-name","devtools.munging.break_munged_name","vec__67019","vec__67022","vec__67025","cljs.core/vec","fn-ns","fn-name-tokens","protocol-name","protocol-method-tokens","fn-name","protocol-method","G__67033","devtools.munging/break-and-demunge-name","devtools.munging.break_and_demunge_name","vec__67034","result","munged-ns","munged-protocol-ns","munged-protocol-name","munged-protocol-method","devtools.munging/parse-fn-source-info","vec__67037","args","vec__67040","ns","demunged-args","cljs.core.comp","clojure.string/trim","clojure.string.split","devtools.munging/parse-fn-info","devtools.munging/parse-fn-info-deep","fn-info","arities","devtools.munging/collect-fn-arities","cljs.core.take","cljs.core.drop","G__67047","devtools.munging/find-index-of-human-prefix","sep-start","num-prefix","finds","cljs.core.filter","cljs.core/pos?","cljs.core.apply","cljs.core/min","devtools.munging/humanize-name","state","index","prefix","cljs.core.get","cljs.core.update","cljs.core/conj","cljs.core/inc","cljs.core.assoc","devtools.munging/humanize-names","names","cljs.core/with-meta","cljs.core.reduce","cljs.core/meta","devtools.munging/collect-fn-fixed-arities","max-arity","collection","arity-fn","devtools.munging/collect-fn-variadic-arities","variadic-arity","p__67061","vec__67062","devtools.munging/review-arity","sub-arities","devtools.munging/review-arities","cljs.core.into","max-fixed-arity","fixed-arities","variadic-arities","cljs.core.merge","devtools.munging/arity-keywords-comparator","y","cljs.core/compare","devtools.munging/arities-key-comparator","kx?","cljs.core/Keyword","ky?","devtools.munging/arities-to-args-lists*","sorted-keys","cljs.core.sort","cljs.core/keys","sorted-fns","p1__67083#","sorted-infos","sorted-args-lists","p1__67084#","cljs.core.vary_meta","cljs.core/assoc","devtools.munging/arities-to-args-lists","p__67087","vec__67088","seq67085","G__67086","humanize?","args-lists","devtools.munging/args-lists-to-strings","spacer-symbol","multi-arity-symbol","rest-symbol","string-mapper","arg","G__67092","printer","args-list","variadic?","args-strings","devtools.munging/extract-arities","devtools.munging.arities_to_args_lists","devtools.munging/common-protocol?","devtools.munging/present-fn-part","include-ns?","and__4115__auto__","devtools.munging/present-protocol-part","include-protocol-ns?","devtools.munging/present-function-name","options","map__67106","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","vec__67107","silence-common-protocols?","arity-str","fn-part","protocol-part","cljs.core/not","devtools.munging/get-basis","devtools.munging/parse-constructor-info","goog/isObject","type-name","parts","basis","e67126","devtools.munging/protocol-path","protocol-selector","devtools.munging/get-protocol-object","obj","path","devtools.munging/protocol-exists?","devtools.munging/get-protocol-selector","key","clojure.string/includes?","devtools.munging/demunge-protocol-selector","devtools.munging/fast-path-protocols-lookup-table","cljs.core/Delay","devtools.munging/key-for-protocol-partition","partition","devtools.munging/scan-fast-path-protocols-partition","partition-key","partition-bits","lookup-table","cljs.core/deref","cljs.core/map?","*","p__67163","vec__67164","accum","bit","protocol","devtools.munging/scan-fast-path-protocols","cljs.core/concat","cljs.core.partial","cljs.core.range","devtools.munging/scan-slow-path-protocols","keys","goog.object/getKeys","selectors","cljs.core.keep","devtools.munging/make-protocol-descriptor","selector","fast?","p__67175","vec__67176","devtools.munging/convert-to-protocol-descriptor","devtools.munging/protocol-descriptors-comparator","a","b","devtools.munging/scan-protocols","fast-path-protocols","slow-path-protocols","all-protocols","devtools.munging/collect-protocol-methods","key-prefix","pattern","cljs.core/re-pattern","all-keys","matches","methods","cljs.core/group-by","match-to-arity","match-arity-comparator","post-process","p__67202","vec__67203","sorted-matches","p1__67196#","by-name-comparator"]],"~:used-vars",["^P",["~$clojure.string/join","~$cljs.core/rest","~$devtools.munging/present-fn-part","~$devtools.munging/arities-key-comparator","~$devtools.munging/get-fn-max-fixed-arity","~$devtools.munging/char-to-superscript","~$devtools.munging/present-function-name","~$clojure.string/split","~$devtools.munging/strip-arity","~$devtools.munging/scan-slow-path-protocols","~$cljs.core/=","~$devtools.munging/ns-exists?","~$goog/isObject","~$devtools.munging/get-protocol-selector","~$devtools.munging/review-arities","~$cljs.core/re-matches","~$cljs.core/partial","~$devtools.munging/humanize-names","~$devtools.munging/get-protocol-object","~$cljs.core/count","~$devtools.munging/demunge-protocol-selector","~$devtools.munging/get-fn-variadic-arity","~$cljs.core/reduce","~$cljs.core/apply","~$devtools.munging/scan-fast-path-protocols-partition","~$cljs.core/take","~$cljs.core/last","~$cljs.core/Delay","~$cljs.core/concat","~$devtools.munging/dollar-replacement","~$devtools.munging/parse-fn-source","~$devtools.munging/collect-fn-variadic-arities","~$clojure.string/includes?","~$devtools.munging/collect-fn-fixed-arities","~$devtools.munging/cljs-fn?","~$devtools.munging/arities-to-args-lists*","~$devtools.munging/js-reserved?","~$devtools.munging/proper-arg-demunge","~$cljs.core/empty?","~$devtools.munging/parse-fn-info-deep","~$devtools.munging/parse-constructor-info","~$cljs.core/into","~$cljs.core/conj","~$devtools.munging/get-fn-source-safely","~$cljs.core/vary-meta","~$cljs.core/sort","~$cljs.core/update","~$devtools.munging/parse-fn-info","~$devtools.munging/find-index-of-human-prefix","~$cljs.core/with-meta","~$devtools.munging/arity-keywords-comparator","~$devtools.munging/detect-namespace-prefix","~$cljs.core/map","~$cljs.core/fn?","~$devtools.munging/key-for-protocol-partition","~$devtools.munging/common-protocol?","~$devtools.munging/make-superscript","~$devtools.munging/review-arity","~$devtools.munging/proper-demunge","~$cljs.core/-flush","~$devtools.munging/dollar-preserving-demunge","~$js/parseInt","~$devtools.munging/normalize-arity","~$devtools.munging/extract-arities","~$devtools.munging/parse-protocol","~$devtools.munging/scan-fast-path-protocols","~$cljs.core/object?","~$devtools.munging/parse-fn-source-info","~$devtools.munging/present-protocol-part","~$cljs.core/min","~$devtools.munging/scan-protocols","~$cljs.core/meta","~$devtools.munging/proper-ns-demunge","~$devtools.munging/break-munged-name","~$clojure.string/replace","~$devtools.munging/get-type-name","~$devtools.context/get-root","~$devtools.munging/convert-to-protocol-descriptor","~$devtools.munging/max-fixed-arity-to-scan","~$cljs.core/vec","~$cljs.core/not","~$cljs.core/compare","~$devtools.munging/make-subscript","~$devtools.munging/get-basis","~$devtools.munging/arities-to-args-lists","~$devtools.munging/humanize-name","~$cljs.core/assoc","~$cljs.core/range","~$devtools.munging/make-protocol-descriptor","~$devtools.munging/protocol-descriptors-comparator","~$clojure.string/trim","~$devtools.munging/args-lists-to-strings","~$devtools.munging/char-to-subscript","~$devtools.munging/cljs-fn-name?","~$cljs.core/first","~$cljs.core/butlast","~$devtools.munging/revert-reserved","~$cljs.core/demunge","~$devtools.munging/collect-fn-arities","~$cljs.core/name","~$devtools.munging/collect-protocol-methods","~$devtools.munging/get-global-scope","~$devtools.munging/get-fn-fixed-arity","~$js/Error","~$devtools.munging/protocol-exists?","~$devtools.munging/reserved-aware-demunge","~$cljs.core/inc","~$devtools.munging/trivial-fn-source?","~$devtools.munging/protocol-path","~$devtools.munging/fast-path-protocols-lookup-table","~$devtools.munging/break-and-demunge-name","~$cljs.core/drop"]]],"~:cache-keys",["~#cmap",[["^1M","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^18","~$goog.dom.HtmlElement"]]],["^1M","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","~$goog.array","~$goog.asserts"]]],["^1M","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4L","~$goog.labs.userAgent.util","^17","~$goog.string.internal"]]],["^1M","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4O"]]],["^1M","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M"]]],["^1M","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M"]]],"~:SHADOW-TIMESTAMP",[1633159566000,1633159566000,1632553764000],["^1M","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M","~$goog.reflect"]]],["^1M","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M","~$goog.html.trustedtypes","^4R","^4S","^4T","^4U"]]],["^1M","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4L","^4M","~$goog.html.SafeUrl","^4T","^4U","^4O"]]],["^1M","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4Y","^4Q","~$goog.html.uncheckedconversions","^4T","^4O"]]],["^1M","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1M","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4L","^4M","~$goog.dom.TagName","~$goog.dom.tags","^51","^52","~$goog.html.SafeStyleSheet","^4Y","^4Q","^4X","^4R","^4S","~$goog.labs.userAgent.browser","^17","^4T","^4U","^4O"]]],["^1M","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^17"]]],["^1M","devtools/munging.cljs"],["894db312e49878f9361ea580dbcda475aaa80093","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^15","^1:","^1;","^17","^13"]]],["^1M","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1M","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4L","^4M","^1H","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",[]]],["^1M","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4L","^17"]]],["^1M","clojure/string.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^15","^1H","^13"]]],["^1M","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","~$goog.dom.safe","^53","^4T","^4O"]]],["^1M","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4O"]]],["^1M","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4L","^4M","^4[","~$goog.math"]]],["^1M","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M","^50","^51","^52","^58","^4Y","^4Q","^4T","^4O"]]],["^1M","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18"]]],["^1M","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","~$goog.math.Long","~$goog.math.Integer","^1H","^17","^4L","~$goog.Uri","^13"]]],["^1M","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M","^4X","^4T","^4U"]]],["^1M","devtools/context.cljs"],["894db312e49878f9361ea580dbcda475aaa80093","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^15"]]],["^1M","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4L","^4M","^52","^17","^4T","^4U","^4O"]]],["^1M","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4W"]]],["^1M","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4L","^4M","^1H"]]],["^1M","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4G",["^ ","^4H",null,"^4I",["^P",[]],"^4J",["^18","^4M","^4U"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1627797520000,"jar:file:/C:/Users/bjtj1/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1633159565000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1627785245000,"jar:file:/C:/Users/bjtj1/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/munging.clj",1633159565000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1627797520000,"jar:file:/C:/Users/bjtj1/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/oops.clj",1633159565000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1631367825000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1631367825000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1627797520000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1631367825000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1627797520000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1627797520000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1627797520000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1632553764000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1631367825000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1627797520000,"jar:file:/C:/Users/bjtj1/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1631367825000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","This namespace implements various heuristics to map Javascript names back to corresponding ClojureScript names.\n  The functionality here heavily depends on observed ClojureScript compiler and runtime behaviour (fragile!).\n  Answers given by functions in this namespace cannot be perfect because generated Javascript naming schemes produced by\n  ClojureScript compiler were not designed with easy reversibility in mind. We recommend this functionality to be used for\n  presentation in the UI only. The goal here is to provide user with more familiar view of runtime state of her app\n  in most common cases (on best effort basis).\n\n  Our main weapons in this uneven fight are:\n    1. munged function names as they appear in Javascript (generated by ClojureScript)\n    2. we can also analyze function sources accessible via .toString\n    3. special cljs$core$IFn$_invoke protocol props generated for multi-arity functions\n\n  We can also cheat and look at runtime state of browser environment to determine some answers about namespaces.\n\n  This code can be used only in non-advanced builds!\n\n  If you discovered breakage or a new case which should be covered by this code, please open an issue:\n    https://github.com/binaryage/cljs-devtools/issues","^7","devtools/munging.cljs","^8",1,"^9",5,"^:",1,"^;",21],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",["^ ","^H","^I","^J","^I","^K","^L","^M","^L","^N","^L"],"^O",["^P",["^Q"]],"^R",["^ ","^H",["^ ","^S",["^T",[[]]],"^8",28,"^9",1,"^7","devtools/munging.clj","^U","^V","^W","^I","^X",true],"^J",["^ ","^S",["^T",[[]]],"^8",21,"^9",1,"^7","devtools/munging.clj","^U","^Y","^W","^I","^X",true],"^Z",["^ ","^S",["^T",[[]]],"^8",12,"^9",1,"^7","devtools/munging.clj","^U","^[","^W","^I","^X",true]],"^U","^I","^11",["^ ","^12","^13"],"^14",["^ ","^15","^15","^16","^17","^18","^18","^17","^17","^13","^13","^12","^13","^19","^1:","^1;","^1;","^1:","^1:","^1<","^1;"],"^1=",["^P",["^1>","^1?"]],"~:shadow/js-access-global",["^P",["String","Error","parseInt"]],"^1@",null,"~:defs",["^ ","~$args-lists-to-strings",["^ ","~:protocol-inline",null,"^5",["^ ","^7","devtools/munging.cljs","^8",446,"^9",7,"^:",446,"^;",28,"^S",["^T",["~$quote",["^T",[["~$args-lists","~$spacer-symbol","~$multi-arity-symbol","~$rest-symbol"]]]]],"^6","Converts a list of arguments lists into a list of strings suitable for UI presentation."],"^U","^40","^7","devtools/munging.cljs","^;",28,"~:method-params",["^T",[["^6<","^6=","^6>","^6?"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^9",1,"~:variadic?",false,"^8",446,"~:ret-tag","~$cljs.core/LazySeq","^:",446,"~:max-fixed-arity",4,"~:fn-var",true,"^S",["^T",["^6;",["^T",[["^6<","^6=","^6>","^6?"]]]]],"^6","Converts a list of arguments lists into a list of strings suitable for UI presentation."],"~$get-basis",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",506,"^9",7,"^:",506,"^;",16,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"^U","^3T","^7","devtools/munging.cljs","^;",16,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",506,"^6D","~$any","^:",506,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"~$humanize-name",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",338,"^9",7,"^:",338,"^;",20,"^S",["^T",["^6;",["^T",[["~$state","~$name"]]]]],"^6","Given a name and intermediate state. Convert name to a human readable version by keeping human readable prefix with\n  optional subscript postfix and store it in ::result. Subscript number is picked based on state. State keeps track of\n  previously assigned subscripts. Returns a new state."],"^U","^3V","^7","devtools/munging.cljs","^;",20,"^6@",["^T",[["^6K","^6L"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",338,"^6D",["^P",["~$clj","^6I"]],"^:",338,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["^6K","^6L"]]]]],"^6","Given a name and intermediate state. Convert name to a human readable version by keeping human readable prefix with\n  optional subscript postfix and store it in ::result. Subscript number is picked based on state. State keeps track of\n  previously assigned subscripts. Returns a new state."],"~$find-index-of-human-prefix",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",324,"^9",7,"^:",324,"^;",33,"^S",["^T",["^6;",["^T",[["^6L"]]]]],"^6","Given a demunged ClojureScript parameter name. Tries to detect human readable part and returns the index where it ends.\n  Returns nil if no prefix can be detected.\n\n  The idea is to convert macro-generated parameters and other generated names to more friendly names.\n  We observed that param names generated by gensym have prefix followed by big numbers.\n  Other generated names contain two dashes after prefix (originally probably using underscores)."],"^U","^31","^7","devtools/munging.cljs","^;",33,"^6@",["^T",[["^6L"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",324,"^6D",["^P",["^6I","~$clj-nil"]],"^:",324,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^6L"]]]]],"^6","Given a demunged ClojureScript parameter name. Tries to detect human readable part and returns the index where it ends.\n  Returns nil if no prefix can be detected.\n\n  The idea is to convert macro-generated parameters and other generated names to more friendly names.\n  We observed that param names generated by gensym have prefix followed by big numbers.\n  Other generated names contain two dashes after prefix (originally probably using underscores)."],"~$protocol-descriptors-comparator",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",588,"^9",7,"^:",588,"^;",38,"^S",["^T",["^6;",["^T",[["~$a","~$b"]]]]]],"^U","^3Z","^7","devtools/munging.cljs","^;",38,"^6@",["^T",[["~$a","~$b"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",588,"^6D","~$number","^:",588,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["~$a","~$b"]]]]]],"~$make-subscript",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",86,"^9",7,"^:",86,"^;",21,"^S",["^T",["^6;",["^T",[["~$subscript"]]]]],"^6","Given a subscript number converts it into a string representation consisting of unicode subscript characters (digits)."],"^U","^3S","^7","devtools/munging.cljs","^;",21,"^6@",["^T",[["^6S"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",86,"^6D","^19","^:",86,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^6S"]]]]],"^6","Given a subscript number converts it into a string representation consisting of unicode subscript characters (digits)."],"~$trivial-fn-source?",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",138,"^9",7,"^:",138,"^;",25,"^S",["^T",["^6;",["^T",[["~$fn-source"]]]]]],"^U","^4@","^7","devtools/munging.cljs","^;",25,"^6@",["^T",[["^6U"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",138,"^6D","~$boolean","^:",138,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^6U"]]]]]],"~$char-to-subscript",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",75,"^9",7,"^:",75,"^;",24,"^S",["^T",["^6;",["^T",[["~$char"]]]]],"^6","Given a character with a single digit converts it into a subscript character.\n  Zero character maps to unicode 'SUBSCRIPT ZERO' (U+2080)."],"^U","^41","^7","devtools/munging.cljs","^;",24,"^6@",["^T",[["^6X"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",75,"^6D","^6I","^:",75,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^6X"]]]]],"^6","Given a character with a single digit converts it into a subscript character.\n  Zero character maps to unicode 'SUBSCRIPT ZERO' (U+2080)."],"~$proper-arg-demunge",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",187,"^9",7,"^:",187,"^;",25,"^S",["^T",["^6;",["^T",[["~$munged-arg-name"]]]]]],"^U","^2R","^7","devtools/munging.cljs","^;",25,"^6@",["^T",[["^6Z"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",187,"^6D","^19","^:",187,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^6Z"]]]]]],"^Q",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",39,"^9",7,"^:",39,"^;",19,"^S",["^T",["^6;",["^T",[["~$x"]]]]]],"^U","^2Q","^7","devtools/munging.cljs","^;",19,"^6@",["^T",[["~$x"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",39,"^6D",["^P",["^6I","^6O"]],"^:",39,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$x"]]]]]],"~$fast-path-protocols-lookup-table",["^ ","^U","^4B","^7","devtools/munging.cljs","^8",552,"^9",1,"^:",552,"^;",38,"^5",["^ ","^7","devtools/munging.cljs","^8",552,"^9",6,"^:",552,"^;",38],"~:tag","^2H"],"~$present-fn-part",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",472,"^9",7,"^:",472,"^;",22,"^S",["^T",["^6;",["^T",[["~$fn-ns","~$fn-name","~$include-ns?"]]]]]],"^U","^1[","^7","devtools/munging.cljs","^;",22,"^6@",["^T",[["^72","^73","^74"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",472,"^6D","^19","^:",472,"^6F",3,"^6G",true,"^S",["^T",["^6;",["^T",[["^72","^73","^74"]]]]]],"~$collect-fn-arities",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",391,"^9",7,"^:",391,"^;",25,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given a Javascript function object, tries to inspect known arity properties generated by ClojureScript compiler and\n  collects all available arity functions into a map. Arities are keyed by arity count and variadic arity gets ::variadic key."],"^U","^47","^7","devtools/munging.cljs","^;",25,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",391,"^6D",["^P",[null,"^6M","^6I","^6O"]],"^:",391,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given a Javascript function object, tries to inspect known arity properties generated by ClojureScript compiler and\n  collects all available arity functions into a map. Arities are keyed by arity count and variadic arity gets ::variadic key."],"~$protocol-path",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",523,"^9",7,"^:",523,"^;",20,"^S",["^T",["^6;",["^T",[["~$protocol-selector"]]]]]],"^U","^4A","^7","devtools/munging.cljs","^;",20,"^6@",["^T",[["^77"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",523,"^6D","^6I","^:",523,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^77"]]]]]],"~$key-for-protocol-partition",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",554,"^9",7,"^:",554,"^;",33,"^S",["^T",["^6;",["^T",[["~$partition"]]]]]],"^U","^37","^7","devtools/munging.cljs","^;",33,"^6@",["^T",[["^79"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",554,"^6D","^19","^:",554,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^79"]]]]]],"~$collect-protocol-methods",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",597,"^9",7,"^:",597,"^;",31,"^S",["^T",["^6;",["^T",[["~$obj","^77"]]]]]],"^U","^49","^7","devtools/munging.cljs","^;",31,"^6@",["^T",[["^7;","^77"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",597,"^6D",["^P",["~$seq","~$cljs.core/IList"]],"^:",597,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["^7;","^77"]]]]]],"~$reserved-aware-demunge",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",179,"^9",7,"^:",179,"^;",29,"^S",["^T",["^6;",["^T",[["~$munged-name"]]]]]],"^U","^4>","^7","devtools/munging.cljs","^;",29,"^6@",["^T",[["^7?"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",179,"^6D",["^P",[null,"^6I"]],"^:",179,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7?"]]]]]],"~$arity-keywords-comparator",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",404,"^9",7,"^:",404,"^;",32,"^S",["^T",["^6;",["^T",[["~$x","~$y"]]]]],"^6","::variadic goes last, other keywords compare by name."],"^U","^33","^7","devtools/munging.cljs","^;",32,"^6@",["^T",[["~$x","~$y"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",404,"^6D","^6Q","^:",404,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["~$x","~$y"]]]]],"^6","::variadic goes last, other keywords compare by name."],"~$extract-arities",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",463,"^9",7,"^:",463,"^;",22,"^S",["^T",["^6;",["^T",[["~$f","~$humanize?","^6=","^6>","^6?"]]]]]],"^U","^3@","^7","devtools/munging.cljs","^;",22,"^6@",["^T",[["~$f","^7B","^6=","^6>","^6?"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",463,"^6D","^6E","^:",463,"^6F",5,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f","^7B","^6=","^6>","^6?"]]]]]],"~$arities-key-comparator",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",412,"^9",7,"^:",412,"^;",29,"^S",["^T",["^6;",["^T",[["~$x","~$y"]]]]],"^6","numbers go first (ordered), then keywords (ordered by name), and then ::variadic sticks last"],"^U","^20","^7","devtools/munging.cljs","^;",29,"^6@",["^T",[["~$x","~$y"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",412,"^6D","^6Q","^:",412,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["~$x","~$y"]]]]],"^6","numbers go first (ordered), then keywords (ordered by name), and then ::variadic sticks last"],"~$get-fn-max-fixed-arity",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",58,"^9",7,"^:",58,"^;",29,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"^U","^21","^7","devtools/munging.cljs","^;",29,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",58,"^6D","^6I","^:",58,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"~$common-protocol?",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",468,"^9",7,"^:",468,"^;",23,"^S",["^T",["^6;",["^T",[["~$protocol-ns","~$protocol-name"]]]]]],"^U","^38","^7","devtools/munging.cljs","^;",23,"^6@",["^T",[["^7F","^7G"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",468,"^6D","^6V","^:",468,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["^7F","^7G"]]]]]],"~$break-munged-name",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",240,"^9",7,"^:",240,"^;",24,"^S",["^T",["^6;",["^T",[["^7?"],["^7?","~$ns-detector"]]]]],"^6","Given a munged-name from Javascript lands attempts to break it into:\n  [fn-ns fn-name protocol-ns protocol-name protocol-method arity].\n\n  Protocol and arity elements are optional. Function elements are always present or \"\".\n\n  examples for input:\n    cljs$core$rest => ['cljs.core', 'rest']\n    cljs.core.reduce$cljs$core$IFn$_invoke$arity$3 => ['cljs.core' 'reduce' 'cljs.core' 'IFn' '_invoke' 3]","~:top-fn",["^ ","^6C",false,"~:fixed-arity",2,"^6F",2,"^6@",[["^7?"],["^7?","^7I"]],"^S",["^T",[["^7?"],["^7?","^7I"]]],"^6B",["^T",[null,null]]]],"^U","^3J","^7","devtools/munging.cljs","^;",24,"^7J",["^ ","^6C",false,"^7K",2,"^6F",2,"^6@",[["^7?"],["^7?","^7I"]],"^S",["^T",[["^7?"],["^7?","^7I"]]],"^6B",["^T",[null,null]]],"^6@",[["^7?"],["^7?","^7I"]],"^6A",null,"^7K",2,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"~:methods",[["^ ","^7K",1,"^6C",false,"^70","^6I"],["^ ","^7K",2,"^6C",false,"^70","~$cljs.core/IVector"]],"^8",240,"^:",240,"^6F",2,"^6G",true,"^S",["^T",[["^7?"],["^7?","^7I"]]],"^6","Given a munged-name from Javascript lands attempts to break it into:\n  [fn-ns fn-name protocol-ns protocol-name protocol-method arity].\n\n  Protocol and arity elements are optional. Function elements are always present or \"\".\n\n  examples for input:\n    cljs$core$rest => ['cljs.core', 'rest']\n    cljs.core.reduce$cljs$core$IFn$_invoke$arity$3 => ['cljs.core' 'reduce' 'cljs.core' 'IFn' '_invoke' 3]"],"~$present-function-name",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",483,"^9",7,"^:",483,"^;",28,"^S",["^T",["^6;",["^T",[["^7?","~$options"]]]]],"^6","Given javascript function name tries to present it as plain string for display in UI on best effort basis."],"^U","^23","^7","devtools/munging.cljs","^;",28,"^6@",["^T",[["^7?","^7O"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",483,"^6D",["^P",[null,"^19"]],"^:",483,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["^7?","^7O"]]]]],"^6","Given javascript function name tries to present it as plain string for display in UI on best effort basis."],"~$char-to-superscript",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",92,"^9",7,"^:",92,"^;",26,"^S",["^T",["^6;",["^T",[["^6X"]]]]],"^6","Given a character with a single digit converts it into a superscript character.\n  Zero character maps to unicode 'SUPERSCRIPT ZERO' (U+2070)."],"^U","^22","^7","devtools/munging.cljs","^;",26,"^6@",["^T",[["^6X"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",92,"^6D","^6I","^:",92,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^6X"]]]]],"^6","Given a character with a single digit converts it into a superscript character.\n  Zero character maps to unicode 'SUPERSCRIPT ZERO' (U+2070)."],"~$get-fn-variadic-arity",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",55,"^9",7,"^:",55,"^;",28,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"^U","^2B","^7","devtools/munging.cljs","^;",28,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",55,"^6D","^6I","^:",55,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"~$scan-protocols",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",591,"^9",7,"^:",591,"^;",21,"^S",["^T",["^6;",["^T",[["^7;"]]]]]],"^U","^3G","^7","devtools/munging.cljs","^;",21,"^6@",["^T",[["^7;"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",591,"^6D",["^P",["^7<","^7="]],"^:",591,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7;"]]]]]],"~$get-protocol-object",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",526,"^9",7,"^:",526,"^;",26,"^S",["^T",["^6;",["^T",[["^77"]]]]]],"^U","^2?","^7","devtools/munging.cljs","^;",26,"^6@",["^T",[["^77"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",526,"^6D",["^P",["^6I","^6O"]],"^:",526,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^77"]]]]]],"~$parse-fn-source",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",123,"^9",7,"^:",123,"^;",22,"^S",["^T",["^6;",["^T",[["^6U"]]]]],"^6","Given a function source code parses out [name args]. Note that both strings are still munged.\n  Suitable for further processing.\n\n  For example for input below the function will return [\"devtools_sample$core$hello\" \"name, unused_param\"]:\n\n  function devtools_sample$core$hello(name, unused_param){\n    return [cljs.core.str(\"hello, \"),cljs.core.str(name),cljs.core.str(\"!\")].join('');\n  }\n  "],"^U","^2K","^7","devtools/munging.cljs","^;",22,"^6@",["^T",[["^6U"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",123,"^6D",["^P",["^7<","^6O"]],"^:",123,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^6U"]]]]],"^6","Given a function source code parses out [name args]. Note that both strings are still munged.\n  Suitable for further processing.\n\n  For example for input below the function will return [\"devtools_sample$core$hello\" \"name, unused_param\"]:\n\n  function devtools_sample$core$hello(name, unused_param){\n    return [cljs.core.str(\"hello, \"),cljs.core.str(name),cljs.core.str(\"!\")].join('');\n  }\n  "],"~$ns-exists?",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",197,"^9",7,"^:",197,"^;",17,"^S",["^T",["^6;",["^T",[["~$ns-module-name"]]]]]],"^U","^28","^7","devtools/munging.cljs","^;",17,"^6@",["^T",[["^7V"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",197,"^6D",["^P",["^6V","^6O"]],"^:",197,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7V"]]]]]],"~$get-protocol-selector",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",537,"^9",7,"^:",537,"^;",28,"^S",["^T",["^6;",["^T",[["~$key"]]]]]],"^U","^2:","^7","devtools/munging.cljs","^;",28,"^6@",["^T",[["^7X"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",537,"^6D",["^P",["^19","^6O"]],"^:",537,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7X"]]]]]],"~$convert-to-protocol-descriptor",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",585,"^9",7,"^:",585,"^;",37,"^S",["^T",["^6;",["^T",[["~$fast?",["^1B","^6L","~$selector"]]]]]]],"^U","^3N","^7","devtools/munging.cljs","^;",37,"^6@",["^T",[["^7Z","~$p__67175"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",585,"^6D","~$cljs.core/IMap","^:",585,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["^7Z",["^1B","^6L","^7["]]]]]]],"~$review-arities",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",383,"^9",7,"^:",383,"^;",21,"^S",["^T",["^6;",["^T",[["~$arities"]]]]],"^6","Some arities can be marked as fixed arity but in fact point to a variadic-arity function. We want to detect this case\n  and turn such improperly categorized arities to ::variadic."],"^U","^2;","^7","devtools/munging.cljs","^;",21,"^6@",["^T",[["^83"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",383,"^6D",["^P",[null,"^6M","^6I"]],"^:",383,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^83"]]]]],"^6","Some arities can be marked as fixed arity but in fact point to a variadic-arity function. We want to detect this case\n  and turn such improperly categorized arities to ::variadic."],"~$scan-fast-path-protocols-partition",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",557,"^9",7,"^:",557,"^;",41,"^S",["^T",["^6;",["^T",[["^7;","^79"]]]]]],"^U","^2E","^7","devtools/munging.cljs","^;",41,"^6@",["^T",[["^7;","^79"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",557,"^6D",["^P",[null,"^6I","^6O"]],"^:",557,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["^7;","^79"]]]]]],"~$proper-ns-demunge",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",192,"^9",7,"^:",192,"^;",24,"^S",["^T",["^6;",["^T",[["~$munged-ns-name"]]]]]],"^U","^3I","^7","devtools/munging.cljs","^;",24,"^6@",["^T",[["^86"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",192,"^6D","^19","^:",192,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^86"]]]]]],"~$strip-arity",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",226,"^9",7,"^:",226,"^;",18,"^S",["^T",["^6;",["^T",[["~$tokens"]]]]]],"^U","^25","^7","devtools/munging.cljs","^;",18,"^6@",["^T",[["^88"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",226,"^6D","^7M","^:",226,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^88"]]]]]],"~$scan-slow-path-protocols",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",574,"^9",7,"^:",574,"^;",31,"^S",["^T",["^6;",["^T",[["^7;"]]]]]],"^U","^26","^7","devtools/munging.cljs","^;",31,"^6@",["^T",[["^7;"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",574,"^6D","^6E","^:",574,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7;"]]]]]],"~$arities-to-args-lists",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",433,"^9",7,"^:",433,"^;",28,"^S",["^T",["^6;",["^T",[["^83","~$&",["^7B"]]]]]],"^6","Given a map of arity functions. Tries to parse individual functions and prepare an arguments list for each arity.\n  Returned list of arguments list is sorted by arity count, variadic arity goes last if available.\n\n  The function also optionally humanizes argument names in each arguments list if requested.","^7J",["^ ","^6C",true,"^7K",1,"^6F",1,"^6@",[["^T",["^83",["^7B"]]]],"^S",["^T",[["^83","~$&",["^7B"]]]],"^6B",["^T",[null]]]],"^U","^3U","^7","devtools/munging.cljs","^;",28,"^7J",["^ ","^6C",true,"^7K",1,"^6F",1,"^6@",[["^T",["^83",["^7B"]]]],"^S",["^T",[["^83","~$&",["^7B"]]]],"^6B",["^T",[null]]],"^6@",[["^T",["^83",["^7B"]]]],"^6A",null,"^7K",1,"^6B",["^T",[null]],"^9",1,"^6C",true,"^7L",[["^ ","^7K",1,"^6C",true,"^70","^6E"]],"^8",433,"^6D","^6I","^:",433,"^6F",1,"^6G",true,"^S",["^T",[["^83","~$&",["^7B"]]]],"^6","Given a map of arity functions. Tries to parse individual functions and prepare an arguments list for each arity.\n  Returned list of arguments list is sorted by arity count, variadic arity goes last if available.\n\n  The function also optionally humanizes argument names in each arguments list if requested."],"~$collect-fn-variadic-arities",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",373,"^9",7,"^:",373,"^;",34,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"^U","^2L","^7","devtools/munging.cljs","^;",34,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",373,"^6D",["^P",["^81","^6O"]],"^:",373,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"~$get-fn-fixed-arity",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",52,"^9",7,"^:",52,"^;",25,"^S",["^T",["^6;",["^T",[["~$f","~$n"]]]]]],"^U","^4;","^7","devtools/munging.cljs","^;",25,"^6@",["^T",[["~$f","~$n"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",52,"^6D","^6I","^:",52,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f","~$n"]]]]]],"~$dollar-replacement",["^ ","^U","^2J","^7","devtools/munging.cljs","^8",31,"^9",1,"^:",31,"^;",24,"^5",["^ ","^7","devtools/munging.cljs","^8",31,"^9",6,"^:",31,"^;",24],"^70","^19"],"~$get-global-scope",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",36,"^9",17,"^:",36,"^;",33,"~:dynamic",true,"^S",["^T",["^6;",["^T",[[]]]]]],"^U","^4:","^7","devtools/munging.cljs","^;",33,"^6@",["^T",[[]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8?",true,"^8",36,"^6D","^6I","^:",36,"^6F",0,"^6G",true,"^S",["^T",["^6;",["^T",[[]]]]]],"~$revert-reserved",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",173,"^9",7,"^:",173,"^;",22,"^S",["^T",["^6;",["^T",[["~$s"]]]]]],"^U","^45","^7","devtools/munging.cljs","^;",22,"^6@",["^T",[["~$s"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",173,"^6D",["^P",[null,"^6I"]],"^:",173,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$s"]]]]]],"~$detect-namespace-prefix",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",202,"^9",7,"^:",202,"^;",30,"^S",["^T",["^6;",["^T",[["^88","~$&",["^7I"]]]]]],"^6","Given a name broken into namespace parts returns [detected-ns remaining-parts],\n  where detected-ns is a string representing longest detected existing namespace and\n  remaining-parts is a vector of remaining input parts not included in the detected-ns concatenation.\n\n  For given input [\"cljs\" \"core\" \"first\"] returns [\"cljs.core\" [\"first\"]] (assuming cljs.core exists)","^7J",["^ ","^6C",true,"^7K",1,"^6F",1,"^6@",[["^T",["^88",["^7I"]]]],"^S",["^T",[["^88","~$&",["^7I"]]]],"^6B",["^T",[null]]]],"^U","^34","^7","devtools/munging.cljs","^;",30,"^7J",["^ ","^6C",true,"^7K",1,"^6F",1,"^6@",[["^T",["^88",["^7I"]]]],"^S",["^T",[["^88","~$&",["^7I"]]]],"^6B",["^T",[null]]],"^6@",[["^T",["^88",["^7I"]]]],"^6A",null,"^7K",1,"^6B",["^T",[null]],"^9",1,"^6C",true,"^7L",[["^ ","^7K",1,"^6C",true,"^70","^7M"]],"^8",202,"^6D","^6I","^:",202,"^6F",1,"^6G",true,"^S",["^T",[["^88","~$&",["^7I"]]]],"^6","Given a name broken into namespace parts returns [detected-ns remaining-parts],\n  where detected-ns is a string representing longest detected existing namespace and\n  remaining-parts is a vector of remaining input parts not included in the detected-ns concatenation.\n\n  For given input [\"cljs\" \"core\" \"first\"] returns [\"cljs.core\" [\"first\"]] (assuming cljs.core exists)"],"~$parse-fn-info-deep",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",303,"^9",7,"^:",303,"^;",25,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given a Javascript function object tries to retrieve [ns name & args] as in parse-fn-info (on best effort basis).\n\n  The difference from parse-fn-info is that this function prefers to read args from arities if available.\n  It recurse arbitrary deep following IFn protocol leads.\n\n  If we hit multi-arity situation in leaf, we don't attempt to list arguments and return ::multi-arity placeholder instead.\n\n  The reason for reading arities is that it gives more accurate parameter names in some cases.\n  We observed that variadic functions don't always contain original parameter names, but individual IFn arity functions do."],"^U","^2T","^7","devtools/munging.cljs","^;",25,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",303,"^6D","^6M","^:",303,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given a Javascript function object tries to retrieve [ns name & args] as in parse-fn-info (on best effort basis).\n\n  The difference from parse-fn-info is that this function prefers to read args from arities if available.\n  It recurse arbitrary deep following IFn protocol leads.\n\n  If we hit multi-arity situation in leaf, we don't attempt to list arguments and return ::multi-arity placeholder instead.\n\n  The reason for reading arities is that it gives more accurate parameter names in some cases.\n  We observed that variadic functions don't always contain original parameter names, but individual IFn arity functions do."],"~$parse-fn-source-info",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",282,"^9",7,"^:",282,"^;",27,"^S",["^T",["^6;",["^T",[["^6U"]]]]],"^6","Given function source code tries to retrieve [ns name & args] on best effort basis, where\n  ns is demunged namespace part of the function name (or \"\" if namespace cannot be detected)\n  name is demunged short name (or \"\" if function is anonymous or name cannot be retrieved)\n  args is optional number of demunged argument names.\n\n  Please note that this function always returns a vector with something. In worst cases [\"\" \"\"].\n  "],"^U","^3D","^7","devtools/munging.cljs","^;",27,"^6@",["^T",[["^6U"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",282,"^6D","^6M","^:",282,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^6U"]]]]],"^6","Given function source code tries to retrieve [ns name & args] on best effort basis, where\n  ns is demunged namespace part of the function name (or \"\" if namespace cannot be detected)\n  name is demunged short name (or \"\" if function is anonymous or name cannot be retrieved)\n  args is optional number of demunged argument names.\n\n  Please note that this function always returns a vector with something. In worst cases [\"\" \"\"].\n  "],"~$arities-to-args-lists*",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",423,"^9",7,"^:",423,"^;",29,"^S",["^T",["^6;",["^T",[["^83"]]]]]],"^U","^2P","^7","devtools/munging.cljs","^;",29,"^6@",["^T",[["^83"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",423,"^6D","^6E","^:",423,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^83"]]]]]],"~$cljs-fn-name?",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",115,"^9",7,"^:",115,"^;",20,"^S",["^T",["^6;",["^T",[["^7?"]]]]],"^6","Given a Javascript name answers if the name was likely generated by ClojureScript.\n  We use a simple heuristic here:\n    The name must contain at least two separate dollars because we assume two-segment namespaces."],"^U","^42","^7","devtools/munging.cljs","^;",20,"^6@",["^T",[["^7?"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",115,"^6D",["^P",["^6V","^6O"]],"^:",115,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7?"]]]]],"^6","Given a Javascript name answers if the name was likely generated by ClojureScript.\n  We use a simple heuristic here:\n    The name must contain at least two separate dollars because we assume two-segment namespaces."],"~$break-and-demunge-name",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",265,"^9",7,"^:",265,"^;",29,"^S",["^T",["^6;",["^T",[["^7?"],["^7?","^7I"]]]]],"^6","Given a munged-name from Javascript lands attempts to break it into a namespace part and remaining short name.\n  Then applies appropriate demunging on them and returns ClojureScript versions of the names.","^7J",["^ ","^6C",false,"^7K",2,"^6F",2,"^6@",[["^7?"],["^7?","^7I"]],"^S",["^T",[["^7?"],["^7?","^7I"]]],"^6B",["^T",[null,null]]]],"^U","^4C","^7","devtools/munging.cljs","^;",29,"^7J",["^ ","^6C",false,"^7K",2,"^6F",2,"^6@",[["^7?"],["^7?","^7I"]],"^S",["^T",[["^7?"],["^7?","^7I"]]],"^6B",["^T",[null,null]]],"^6@",[["^7?"],["^7?","^7I"]],"^6A",null,"^7K",2,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^7L",[["^ ","^7K",1,"^6C",false,"^70","^6I"],["^ ","^7K",2,"^6C",false,"^70","^7M"]],"^8",265,"^:",265,"^6F",2,"^6G",true,"^S",["^T",[["^7?"],["^7?","^7I"]]],"^6","Given a munged-name from Javascript lands attempts to break it into a namespace part and remaining short name.\n  Then applies appropriate demunging on them and returns ClojureScript versions of the names."],"~$parse-constructor-info",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",509,"^9",7,"^:",509,"^;",29,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given a Javascript constructor function tries to retrieve [ns name basis]. Returns nil if not a cljs type."],"^U","^2U","^7","devtools/munging.cljs","^;",29,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",509,"^6D",["^P",["^6M","^6O"]],"^:",509,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given a Javascript constructor function tries to retrieve [ns name basis]. Returns nil if not a cljs type."],"~$collect-fn-fixed-arities",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",364,"^9",7,"^:",364,"^;",31,"^S",["^T",["^6;",["^T",[["~$f","~$max-arity"]]]]]],"^U","^2N","^7","devtools/munging.cljs","^;",31,"^6@",["^T",[["~$f","^8I"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",364,"^6D","^6I","^:",364,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f","^8I"]]]]]],"~$get-fn-source-safely",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",44,"^9",7,"^:",44,"^;",27,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"^U","^2X","^7","devtools/munging.cljs","^;",27,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",44,"^:",44,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]]],"~$cljs-fn?",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",144,"^9",7,"^:",144,"^;",15,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given a Javascript function object returns true if the function looks like a ClojureScript function.\n\n  Uses various heuristics:\n    1. must be fn? (is javascript function or satisfies Fn and IFn protocols)\n    2. and name must be cljs-fn-name? (name can come from f.name or parsed out of function source)\n    3. or if anonymous function, must be non-trivial"],"^U","^2O","^7","devtools/munging.cljs","^;",15,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",144,"^6D",["^P",["^6V","^6O"]],"^:",144,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given a Javascript function object returns true if the function looks like a ClojureScript function.\n\n  Uses various heuristics:\n    1. must be fn? (is javascript function or satisfies Fn and IFn protocols)\n    2. and name must be cljs-fn-name? (name can come from f.name or parsed out of function source)\n    3. or if anonymous function, must be non-trivial"],"~$protocol-exists?",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",534,"^9",7,"^:",534,"^;",23,"^S",["^T",["^6;",["^T",[["^77"]]]]]],"^U","^4=","^7","devtools/munging.cljs","^;",23,"^6@",["^T",[["^77"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",534,"^6D","^6V","^:",534,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^77"]]]]]],"~$parse-fn-info",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",297,"^9",7,"^:",297,"^;",20,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-source-info (on best effort basis)."],"^U","^30","^7","devtools/munging.cljs","^;",20,"^6@",["^T",[["~$f"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",297,"^6D","^6M","^:",297,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$f"]]]]],"^6","Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-source-info (on best effort basis)."],"~$make-superscript",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",107,"^9",7,"^:",107,"^;",23,"^S",["^T",["^6;",["^T",[["~$superscript"]]]]],"^6","Given a superscript number converts it into a string representation consisting of unicode superscript characters (digits)."],"^U","^39","^7","devtools/munging.cljs","^;",23,"^6@",["^T",[["^8O"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",107,"^6D","^19","^:",107,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^8O"]]]]],"^6","Given a superscript number converts it into a string representation consisting of unicode superscript characters (digits)."],"~$demunge-protocol-selector",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",544,"^9",7,"^:",544,"^;",32,"^S",["^T",["^6;",["^T",[["^77"]]]]]],"^U","^2A","^7","devtools/munging.cljs","^;",32,"^6@",["^T",[["^77"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",544,"^6D","^7M","^:",544,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^77"]]]]]],"~$proper-demunge",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",184,"^9",7,"^:",184,"^;",21,"^S",["^T",["^6;",["^T",[["^7?"]]]]]],"^U","^3;","^7","devtools/munging.cljs","^;",21,"^6@",["^T",[["^7?"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",184,"^6D",["^P",[null,"^6I"]],"^:",184,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7?"]]]]]],"~$normalize-arity",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",219,"^9",7,"^:",219,"^;",22,"^S",["^T",["^6;",["^T",[["~$arity-tokens"]]]]]],"^U","^3?","^7","devtools/munging.cljs","^;",22,"^6@",["^T",[["^8S"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",219,"^6D",["^P",[null,"^6O"]],"^:",219,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^8S"]]]]]],"~$present-protocol-part",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",477,"^9",7,"^:",477,"^;",28,"^S",["^T",["^6;",["^T",[["^7F","^7G","~$protocol-method","~$include-protocol-ns?"]]]]]],"^U","^3E","^7","devtools/munging.cljs","^;",28,"^6@",["^T",[["^7F","^7G","^8U","^8V"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",477,"^6D","^19","^:",477,"^6F",4,"^6G",true,"^S",["^T",["^6;",["^T",[["^7F","^7G","^8U","^8V"]]]]]],"~$parse-protocol",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",230,"^9",7,"^:",230,"^;",21,"^S",["^T",["^6;",["^T",[["^88","~$detector"]]]]]],"^U","^3A","^7","devtools/munging.cljs","^;",21,"^6@",["^T",[["^88","^8X"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",230,"^6D","^7M","^:",230,"^6F",2,"^6G",true,"^S",["^T",["^6;",["^T",[["^88","^8X"]]]]]],"~$humanize-names",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",353,"^9",7,"^:",353,"^;",21,"^S",["^T",["^6;",["^T",[["~$names"]]]]],"^6","Given a list of names, returns a list of human-readable versions of those names.\n  It detects human-readable prefix using a simple heuristics. When names repeat it assigns simple subscripts starting with 2.\n  Subscripts are assigned left-to-right.\n\n  Given [\"p--a\" \"p--b\" \"x\" \"p--c\"] returns [\"p\" \"p₂\" \"x\" \"p₃\"]"],"^U","^2>","^7","devtools/munging.cljs","^;",21,"^6@",["^T",[["^8Z"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",353,"^6D",["^P",["^6M","~$cljs.core/MetaFn","^6O"]],"^:",353,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^8Z"]]]]],"^6","Given a list of names, returns a list of human-readable versions of those names.\n  It detects human-readable prefix using a simple heuristics. When names repeat it assigns simple subscripts starting with 2.\n  Subscripts are assigned left-to-right.\n\n  Given [\"p--a\" \"p--b\" \"x\" \"p--c\"] returns [\"p\" \"p₂\" \"x\" \"p₃\"]"],"~$review-arity",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",377,"^9",7,"^:",377,"^;",19,"^S",["^T",["^6;",["^T",[[["~$arity","~$arity-fn"]]]]]]],"^U","^3:","^7","devtools/munging.cljs","^;",19,"^6@",["^T",[["~$p__67061"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",377,"^6D","^7M","^:",377,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[[["^91","^92"]]]]]]],"~$dollar-preserving-demunge",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",164,"^9",7,"^:",164,"^;",32,"^S",["^T",["^6;",["^T",[["^7?"]]]]],"^6","Standard cljs.core/demunge is too aggressive in replacing dollars.\n  This wrapper function works around it by leaving dollars intact."],"^U","^3=","^7","devtools/munging.cljs","^;",32,"^6@",["^T",[["^7?"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",164,"^6D","^19","^:",164,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7?"]]]]],"^6","Standard cljs.core/demunge is too aggressive in replacing dollars.\n  This wrapper function works around it by leaving dollars intact."],"~$scan-fast-path-protocols",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",571,"^9",7,"^:",571,"^;",31,"^S",["^T",["^6;",["^T",[["^7;"]]]]]],"^U","^3B","^7","devtools/munging.cljs","^;",31,"^6@",["^T",[["^7;"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",571,"^6D","^6I","^:",571,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["^7;"]]]]]],"~$max-fixed-arity-to-scan",["^ ","^U","^3O","^7","devtools/munging.cljs","^8",32,"^9",1,"^:",32,"^;",29,"^5",["^ ","^7","devtools/munging.cljs","^8",32,"^9",6,"^:",32,"^;",29],"^70","^6Q"],"~$make-protocol-descriptor",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",579,"^9",7,"^:",579,"^;",31,"^S",["^T",["^6;",["^T",[["^1B","^6L","^7[","^7Z"]]]]]],"^U","^3Y","^7","devtools/munging.cljs","^;",31,"^6@",["^T",[["^1B","^6L","^7[","^7Z"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",579,"^6D","^81","^:",579,"^6F",4,"^6G",true,"^S",["^T",["^6;",["^T",[["^1B","^6L","^7[","^7Z"]]]]]],"~$get-type-name",["^ ","^6:",null,"^5",["^ ","^7","devtools/munging.cljs","^8",61,"^9",7,"^:",61,"^;",20,"^S",["^T",["^6;",["^T",[["~$t"]]]]]],"^U","^3L","^7","devtools/munging.cljs","^;",20,"^6@",["^T",[["~$t"]]],"^6A",null,"^6B",["^T",[null,null]],"^9",1,"^6C",false,"^8",61,"^6D","^19","^:",61,"^6F",1,"^6G",true,"^S",["^T",["^6;",["^T",[["~$t"]]]]]]],"^1?",["^ ","^I","^I","^L","^L","^15","^15"],"~:cljs.analyzer/constants",["^ ","^1=",["^P",["~:selector","~:devtools.munging/variadic","~:else","~:include-protocol-ns?","~:ns-detector","^W","^U","~:naked","~:fast?","~:devtools.munging/multi-arity","~:silence-common-protocols?","~:include-ns?","~:devtools.munging/result"]],"~:order",["^9A","^9D","^9;","^9<","^9?","^9C","^9=","^9B","^9>","^W","^U","^9:","^9@"]],"^1I",["^ ","^1?",["^P",[]],"^1>",["^P",[]]],"^1J",["^ "],"^1K",["^18","^15","^1:","^1;","^17","^13"]],"^W","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^P",[]],"~:compiler-options",["^4F",[["^9H","~:static-fns"],true,["^9H","~:shadow-tweaks"],null,["^9H","~:source-map-inline"],null,["^9H","~:elide-asserts"],false,["^9H","~:optimize-constants"],null,["^9H","^1P"],null,["^9H","~:external-config"],null,["^9H","~:tooling-config"],null,["^9H","~:emit-constants"],null,["^9H","~:load-tests"],null,["^9H","~:form-size-threshold"],null,["^9H","~:data-readers"],null,["^9H","~:infer-externs"],"~:auto",["^9H","^1R"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9H","~:fn-invoke-direct"],null,["^9H","~:source-map"],"/dev/null"]]]